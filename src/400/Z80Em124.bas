   10 REM > Z80Em
   19 REM 32 bit
   28 *RMENSURE Z80Support 0.00 RMLoad <Z80Em$Res>.Z80Support
   37 *RMENSURE AYSound 0.00 RMLoad <Z80Em$Res>.AYSound
   46 MEM$="48"
   55 
   64 LIBRARY "<Z80Em$Dir>.Src.Mem48"
   73 
   82 debug%=44 : REMINPUT"debug% 0=old, 44=new",debug%
   91 
  100 exact=TRUE
  109 tapeX=TRUE : tape_flag=1<<15
  118 spool=FALSE : REMIF INKEY-3 THEN spool=TRUE:exact=FALSE
  127 REMspool=TRUE
  136 tape=FALSE
  145 emuH=TRUE
  154 emuR=TRUE
  163 claim=0
  172 Z80mem=&20000:regs%=&20000-&100:HIMEM=&48000
  181 code%=&48000:page%=code%
  190 ONERROR ONERROR OFF:REPORT:PRINT " at line ";ERL:SYS"XOS_Byte",15:END
  199 PROCinit
  208 PROCregisters(FALSE)
  217 PROCassemble(4):PROCassemble(6)
  226 
  235 SYS "OS_File",10,"<Z80Em$Dir>.Code"+MEM$,&FFD,,code%,O%
  244 PRINT "Code";MEM$
  253 
  262 IF MEM$="128" THEN END
  271 
  280 CLEAR : REM remove Mem48
  289 LIBRARY "<Z80Em$Dir>.Src.Mem128"
  298 MEM$="128"
  307 GOTOlineDI@
  316 
  325 
  334 DEFPROCinit
  343 DIM kemp(16)
  352 REM DIM code 1000000,
  361 DIM i%(255),reg%(30),CB%(&FF),DD%(&FF),ED%(&FF),FD%(&FF),print(&FF)
  370 REMIF code>&30000 THEN STOP
  379 DIM DDCB%(&FF),FDCB%(&FF)
  388 F=6 : REM R6=[SP|0|IFF1|IFF2|IM|F]
  397 REM RI=[RRRRRRR|0|IIIIIIIIR]
  406 REM Z80 regs stored in bottom 16 bits
  415 REM apart from pc,sp
  424 REM R2=pointer to decoding table
  433 REM R0,R1,R14 scrap regs
  442 zpc=10 : zSP=6 :
  451 HL=5 : DE=4 : BC=8 : A=7
  460 RI=11 : IX=9 : IY=12
  469 
  478 flagS = 1<<7
  487 flagZ = 1<<6
  496 flag5 = 1<<5
  505 flagH = 1<<4
  514 flag3 = 1<<3
  523 flagP = 1<<2 : flagV = flagP
  532 flagN = 1<<1
  541 flagC = 1<<0
  550 
  559 reg%(0)=BC + 128 : reg%(1)=BC
  568 reg%(2)=DE + 128 : reg%(3)=DE
  577 reg%(4)=HL + 128 : reg%(5)=HL
  586 reg%(6)=HL + 64
  595 reg%(7)=A
  604 reg%(9)= IX + 32 +256
  613 reg%(10)=IY + 32 +256
  622 reg%(11)=IX+128 +512:reg%(12)=IX +512
  631 reg%(13)=IY+128 +768:reg%(14)=IY +768
  640 
  649 ENDPROC
  658 
  667 DEFPROCregisters(A%)
  676 REM \\ DS ; Major change - *all* store accessed via R3
  685 IF A% THEN P%=regs%:ELSE O%=code%:P%=-256
  694 [OPT 4 AND A%=FALSE
  703 .delay & &11000
  712 
  721 ; MAIN REGISTERS
  730 .Pc & 0
  739 .bc EQUW 0
  748 .de EQUW 0
  757 .hl & 0
  766 .ix & 0
  775 .iy & 0
  784 .sp & 0 ; zSP,F,IFFs,IM
  793 .ri & 0
  802 .a  & 0
  811 
  820 ; ALTERNATE REGISTERS
  829 .bc2 EQUW 0
  838 .de2 EQUW 0
  847 .hl2 & 0
  856 .a2  & 0
  865 .f2  & 0
  874 
  883 .returnPC    & 0
  892 .border_col  & 0
  901 .tape_handle & 0
  910 .mem128_addr & 0
  919 .port_7FFD   & 0
  928 .port_FFFD   & 0              \\ DS
  937 .ticker      & 0
  946 .windowhandle & 0
  955 .pollblock & 0
  964 .frameblock & 0
  973 
  982 .m128 & &4000
  991 
 1000 .keysptr & 0
 1009 .listentape & 0
 1018 .sound_16bit & 0
 1027 ]ENDPROC
 1036 
 1045 DEFPROCassemble(p)
 1054 O%=code%
 1063 REMIF make THEN P%=Z80mem+&28000 ELSE P%=code%
 1072 P%=code%
 1081 [OPT p
 1090 ALIGN
 1099 .start
 1108 ;& &FF11AFF3 ; first 4 bytes of ROM
 1117 & &1820301C ; PAGING INFO
 1126 & update_screen
 1135 .z80mem & Z80mem
 1144 
 1153 .Z80start
 1162 STMFD R13!,{R0-R12,R14}       \\ DS ; Some major changes follow throughout
 1171 ;LDR R3,z80mem
 1180 FNsetR3
 1189 STR R13,[R3,#returnPC]
 1198 STR R0,[R3,#tape_handle]
 1207 AND R0,R1,#1:STR R0,[R3,#listentape]
 1216 SWI "Z80_GetKeys":STR R0,[R3,#keysptr]
 1225 BL setup_7FFD
 1234 BL init_border
 1243 MOV R0,#0:STR R0,time:STR R0,visxsize
 1252 MOV R13,#1
 1261 FNsetR3
 1270 LDR R14,[R3,#tape_handle]:TST R14,#1
 1279 BICNE R14,R14,#1:STRNE R14,[R3,#tape_handle]:LDRNE R13,[R3,#ticker]
 1288 LDRB A,[R3,#a]
 1297 LDR zSP,[R3,#sp]
 1306 LDR IX,[R3,#ix]
 1315 LDR IY,[R3,#iy]
 1324 LDR BC,[R3,#bc]
 1333 MOV DE,BC,LSR#16
 1342 MOV BC,BC,LSL#16
 1351 MOV BC,BC,LSR#16
 1360 LDR HL,[R3,#hl]
 1369 LDR RI,[R3,#ri]
 1378 LDR zpc,[R3,#Pc]
 1387 LDR R2,maintable_adr
 1396 ]IF spool THEN Q$=FNshowregs
 1405 [OPTp
 1414 ;FNpoppc
 1423 FNfetch
 1432 .maintable_adr & maintable
 1441 
 1450 .tape_byte & 0
 1459 .T_count & 256
 1468 
 1477 .TAP
 1486 ADD zpc,zpc,#2 << 16
 1495 MOV R0,#201
 1504 B EXIT_main
 1513 
 1522 .multi_load
 1531 ADD zpc,zpc,#2 << 16
 1540 MOV R0,#200
 1549 B EXIT_main
 1558 
 1567 .EXIT
 1576 MOV R0,#300
 1585 B EXIT_main
 1594 
 1603 .fkeys
 1612 ;CMP R0,#&C
 1621 .exit
 1630 SWI "Z80_Getkdata"
 1639 .EXIT_main
 1648 FNsetR3
 1657 STRB A,[R3,#a]
 1666 STR zSP,[R3,#sp]
 1675 STR IX,[R3,#ix]
 1684 STR IY,[R3,#iy]
 1693 ADD BC,BC,DE,LSL#16
 1702 STR BC,[R3,#bc]
 1711 ;STR DE,[R3,#de]
 1720 STR HL,[R3,#hl]
 1729 STR RI,[R3,#ri]
 1738 STR zpc,[R3,#Pc]
 1747 MOV R8,R0
 1756 ADR R0,poll_block:STR R0,[R3,#pollblock]
 1765 MOV R0,#15:MOV R1,#0:SWI "OS_Byte"
 1774 LDR R13,[R3,#returnPC]
 1783 LDMFD R13!,{R0}
 1792 MOV R0,R8
 1801 LDMFD R13!,{R1-R12,PC}
 1810 
 1819 .keys & -1:& -1
 1828 .time & 0
 1837 .RETN
 1846 AND R0,F,#%010000000000
 1855 BIC F,F, #%100000000000
 1864 ADD F,F,R0,LSL#1
 1873 
 1882 .RETI
 1891 ;LDR R0,HALTword
 1900 ;CMP R0,#1
 1909 ;MOVEQ R0,#2
 1918 ;STREQ R0,HALTword
 1927 
 1936 FNldrb2(zpc,3,zSP)
 1945 ADD zSP,zSP,#1 << 16
 1954 FNldrb2(1,3,zSP)
 1963 ADD zSP,zSP,#1 << 16
 1972 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
 1981 FNfetch2(0,14)
 1990 
 1999 .HALTword &0
 2008 
 2017 .HALT
 2026 SUBS R13,R13,#4
 2035 BPL HALT
 2044 
 2053 LDR R0,HALTword
 2062 CMP R0,#0
 2071 MOVEQ R1,#1
 2080 STREQ R1,HALTword
 2089 CMP R0,#2
 2098 MOVEQ R0,#0
 2107 STREQ R0,HALTword
 2116 
 2125 
 2134 ADDEQ zpc,zpc,#1 << 16
 2143 ;MOV R13,#0
 2152 FNfetch2(0,4)
 2161 
 2170 .R3store & 0
 2179 
 2188 .old_border & -1
 2197 
 2206 .init_border
 2215 MVN R0,#0:STRB R0,old_border
 2224 MOV R0,#129:MOV R1,#0:MOV R2,#255:SWI "OS_Byte":ADR R0,vidc2
 2233 CMP R1,#&A5:ADRLO R0,vidc1
 2242 LDRLO R2,[R3,#border_col]:MOVLO R2,R2,LSR #12 ; fiddle for VIDC1
 2251 BICLO R2,R2,#&F0:ORRLO R2,R2,R2,LSR #4
 2260 BICLO R2,R2,#&F00:ORRLO R2,R2,R2,LSR #8
 2269 STRLOB R2,[R3,#border_col+1]:MOVLO R2,R2,LSR #8:STRLOB R2,[R3,#border_col+2]
 2278 CMP R1,#&A8:ADRHS R0,vidc_os
 2287 STR R0,go_border
 2296 MOV PC,R14
 2305 
 2314 .vidc1 ; fast method for VIDC1 (Archimedes)
 2323 SWI "OS_EnterOS":STR R1,out_FE_stash
 2332 LDR R0,[R3,#border_col+1]
 2341 TST R1,#%010:ORRNE R1,R1,#&F00
 2350 TST R1,#%100:ORRNE R1,R1,#&F000
 2359 TST R1,#%001:ORRNE R1,R1,#&F0000
 2368 AND R1,R0,R1,LSR #8:ORR R1,R1,#4<<28
 2377 MOV R0,#&3400000:STR R1,[R0]
 2386 TSTP PC,#3:LDR R1,out_FE_stash
 2395 B not_border
 2404 
 2413 .vidc2 ; fast method for VIDC20 & VIDC2L (Risc PC, A7000)
 2422 SWI "OS_EnterOS":STR R1,out_FE_stash
 2431 LDR R0,[R3,#border_col+1]
 2440 TST R1,#%010:ORRNE R1,R1,#&FF00
 2449 TST R1,#%100:ORRNE R1,R1,#&FF0000
 2458 TST R1,#%001:ORRNE R1,R1,#&FF000000
 2467 AND R1,R0,R1,LSR #8:ORR R1,R1,#4<<28
 2476 MOV R0,#&3500000:STR R1,[R0]
 2485 TSTP PC,#3:LDR R1,out_FE_stash
 2494 B not_border
 2503 
 2512 .vidc_os ; slow method for unknown hardware
 2521 ADR R0,out_FE_stash:STMIA R0,{R1-R4,R9}
 2530 LDR R0,[R3,#border_col]:MOV R2,#&10
 2539 TST R1,#%010:ORRNE R2,R2,#&FF00
 2548 TST R1,#%100:ORRNE R2,R2,#&FF0000
 2557 TST R1,#%001:ORRNE R2,R2,#&FF000000
 2566 AND R2,R2,R0:MOV R0,#0:MOV R1,#24:MOV R4,#2
 2575 MOV R9,#&23:SWI "XOS_CallAVector"
 2584 ADR R0,out_FE_stash:LDMIA R0,{R1-R4,R9}
 2593 B not_border
 2602 .out_FE_stash:= STRING$(5*4,CHR$ 0)
 2611 
 2620 .go_border & 0
 2629 
 2638 .poll_mask & %0000000000011000000110000
 2647 
 2656 .poll_block
 2665 = STRING$(255,CHR$ 0):= 0
 2674 
 2683 .tape_do
 2692 LDR R1,T_count
 2701 SUBS R1,R1,R14
 2710 STR R1,T_count
 2719 BGT tape_done
 2728 ;.tape_short
 2737 LDRB R14,tape_byte
 2746 EOR R14,R14,#&FF
 2755 STRB R14,tape_byte
 2764 SWI "Z80_TapePulse"
 2773 CMP R0,#0:BLT EXIT_main
 2782 LDREQ R0,[R3,#delay]
 2791 ADD R1,R1,R0
 2800 LDRGT R14,[R3,#listentape]
 2809 STR R1,T_count
 2818 CMPGT R14,#0
 2827 BLGT d_out_tape
 2836 TEQ R13,#0
 2845 FNldrbPL2(14,3,zpc)
 2854 LDRPL PC,[R2,R14,LSL#2]
 2863 B do_interrupt
 2872 
 2881 .tape_fetch
 2890 SUB R13,R13,R14
 2899 FNsetR3
 2908 LDR R0,[R3,#tape_handle]
 2917 TEQ R0,#0
 2926 BNE tape_do
 2935 
 2944 .tape_done
 2953 TEQ R13,#0
 2962 FNldrbPL2(14,3,zpc)
 2971 LDRPL PC,[R2,R14,LSL#2]
 2980 
 2989 ; into the interrupt code...
 2998 .do_interrupt
 3007 LDR R0,HALTword
 3016 CMP R0,#1
 3025 MOVEQ R0,#2
 3034 STREQ R0,HALTword
 3043 
 3052 
 3061 
 3070 LDR R0,[R3,#delay]
 3079 ADD R13,R13,R0
 3088 LDR R0,cycle
 3097 SUBS R0,R0,#1
 3106 LDREQ R0,[R3,#frameblock]
 3115 STR R0,cycle
 3124 ;BEQ skipflash
 3133 SWINE "Z80_IncrementFlash"
 3142 
 3151 
 3160 ;LDR R0,cycle
 3169 ;LDR R1,[R3,#frameblock]
 3178 ;SUBS R0,R0,R1
 3187 BNE endpoll
 3196 ;.skipflash
 3205 
 3214 LDRB R0,[R3,#border_col]
 3223 LDRB R1,old_border
 3232 AND R0,R0,#%111
 3241 CMP R0,R1
 3250 STRNEB R0,old_border
 3259 MVNEQ R0,#0 ; -1
 3268 
 3277 LDR R1,[R3,#windowhandle]
 3286 CMP R1,#0
 3295 MVNGT R0,#0 ; -1 don't do border if multitasking
 3304 
 3313 ]
 3322 IF MEM$="128" THEN
 3331 [OPTp
 3340 LDRB R1,[R3,#port_7FFD]
 3349 TST R1,#%1000
 3358 ADDEQ R3,R3,#(5+2-1)*16*1024 ; screen 5
 3367 ADDNE R3,R3,#(7+2-1)*16*1024 ; screen 7
 3376 ;ADD R3,R3,#(5+2-1)*16*1024 ; screen 5
 3385 
 3394 ;MOV R3,#&18000
 3403 ]
 3412 ENDIF
 3421 
 3430 [OPTp
 3439 
 3448 .update_screen ; don't put anything here!
 3457 SWI "Z80_UpdateScreen"
 3466 FNsetR3
 3475 
 3484 LDR R0,[R3,#windowhandle]
 3493 CMP R0,#0 : BLE endpoll ; NOT multitasking!
 3502 STR R2,temp2
 3511 STR R4,temp4
 3520 MOV R1,#0
 3529 MOV R2,#0
 3538 MOV R3,#256*8
 3547 MOV R4,#192*8
 3556 SWI "Wimp_ForceRedraw"
 3565 
 3574 LDR R0,poll_mask
 3583 ADR R1,poll_block
 3592 MOV R2,#0
 3601 MOV R3,#0
 3610 SWI "Wimp_Poll"
 3619 STR R0,event
 3628 
 3637 LDR R2,temp2
 3646 LDR R4,temp4
 3655 
 3664 CMP R0,#2 : BNE not2
 3673 SWI "Wimp_OpenWindow"
 3682 
 3691 LDR R2,[R1,#4]
 3700 LDR R3,[R1,#12]
 3709 SUB R3,R3,R2
 3718 LDR R2,visxsize
 3727 STR R3,visxsize
 3736 CMP R2,R3         ; has the window been resized (toggled)
 3745 LDR R2,temp2
 3754 BNE endpoll
 3763 
 3772 MOV R0,#0 : STR R0,event
 3781 B endpoll
 3790 .visxsize
 3799 EQUD 0
 3808 .not2
 3817 
 3826 CMP R0,#8 : BNE endpoll
 3835 LDR R0,[R1,#24]
 3844 CMP R0,#&1CC
 3853 CMPNE R0,#&1DC
 3862 CMPNE R0,#&1EC
 3871 CMPNE R0,#&1FC
 3880 SWIEQ "Wimp_ProcessKey"
 3889 MOV R0,#0
 3898 STR R0,event
 3907 
 3916 .endpoll
 3925 SWI "AYSound_Ticker"
 3934 
 3943 FNsetR3
 3952 BL d_interrupt                ; do the sound and wait until
 3961                               ; syncronised
 3970 ;SWI &100+ASC"I"
 3979 
 3988 LDR R0,time
 3997 ADD R0,R0,#1
 4006 STR R0,time
 4015 
 4024 LDR R13,[R3,#delay]
 4033 
 4042 SWI "Z80_Getkdata"
 4051 CMP R0,#&C:BEQ f12:BLT fkeys
 4060 TEQ R0,#&71:BEQ f12
 4069 .skipf12
 4078 
 4087 LDR R0,event
 4096 MOV R1,#0:STR R1,event
 4105 CMP R0,#0
 4114 ADDNE R0,R0,#&100
 4123 BNE EXIT_main
 4132 ]
 4141 
 4150 IF spool THEN
 4159 [OPTp
 4168 FNldrb2(14,3,zpc)
 4177 LDR pc,[R2,R14,LSL#2]
 4186 
 4195 ]
 4204 OTHERWISE
 4213 [OPTp
 4222 TST zSP,#%100000000000 ; IFF1
 4231 ;LDREQB R14,[R3,zpc,LSR#16]
 4240 FNldrbEQ2(14,3,zpc)
 4249 LDREQ pc,[R2,R14,LSL#2]
 4258 ]
 4267 ENDIF
 4276 
 4285 [OPTp
 4294 ;SWI &100+ASC"i"
 4303 FNpushpc
 4312 BIC zSP,zSP,#%110000000000 ; clear IFF1,2
 4321 \ANDS R0,zSP, #%1100000000
 4330 \BEQ mode0
 4339 ANDS R0,zSP, #%1000000000
 4348 BEQ mode1
 4357 
 4366 .mode2
 4375 MOV R0,RI,LSL#23
 4384 ORR R0,R0,#&FF<<16
 4393 ;LDRB zpc,[R3,R0,LSR #16]
 4402 FNldrb2(zpc,3,0)
 4411 ADD R0,R0,#1<<16
 4420 ;LDRB R1,[R3,R0,LSR #16]
 4429 FNldrb2(1,3,0)
 4438 ADD zpc,zpc,R1,LSL#8
 4447 MOV zpc,zpc,LSL#16
 4456 
 4465 FNfetch
 4474 
 4483 .mode0
 4492 .mode1
 4501 MOV zpc,#&0038 << 16
 4510 FNfetch
 4519 
 4528 .f12
 4537 LDR R0,[R3,#windowhandle]
 4546 CMP R0,#0
 4555 BLE fkeys
 4564 B skipf12
 4573 
 4582 .claim_adr & claim
 4591 
 4600 .temp2 & 0
 4609 .temp4 & 0
 4618 
 4627 .event & 0
 4636 
 4645 .cycle & 1
 4654 
 4663 .IN_A_n
 4672 ADD R0,zpc,#1<<16
 4681 FNldrb2(0,3,0)
 4690 CMP R0,#&FE
 4699 BNE notkey_noflags
 4708 .readkey
 4717 FNreadkey(A)
 4726 MOV A,R14
 4735 LDRB R0,tape_byte
 4744 TST R0,#128
 4753 ORRNE A,A,#%1000000
 4762 BICEQ A,A,#%1000000
 4771 ]:REMIF debug%>000 THEN [OPTp:FNpzs_c(A):]
 4780 [OPTp
 4789 FNfetch2(2,12) ; 12.15
 4798 
 4807 .notkey_noflags
 4816 CMP R0,#&1F:BEQ kempston_noflags
 4825 MOV A,#&FF
 4834 CMP R0,#&FF:BEQ port_FF_noflags
 4843 ]:REMIF debug%>001 THEN [OPTp:FNpzs_c(A):]
 4852 [OPTp
 4861 FNfetch2(2,11)
 4870 
 4879 .notkeyA
 4888 CMP R0,#&FF:BEQ port_FF
 4897 CMP R0,#&1F:BNE notkempA \\ DS ; was MOVNE R0,#&FF
 4906 BL kempston2
 4915 MOV A,R0
 4924 .notkey_fetch
 4933 ]:IF debug%>002 THEN [OPTp:FNpzs_c(A,0):]
 4942 [OPTp
 4951 FNfetch2(2,11)
 4960 .notkempA           \\ DS ; to .notkeyB
 4969 ADD R0,BC,#3
 4978 TEQ R0,#&C000
 4987 TEQNE R0,#&10000
 4996 MOVNE R1,#&FF
 5005 FNsetR3
 5014 LDREQ R0,[R3,#port_FFFD]
 5023 SWIEQ "XAYSound_Read"
 5032 MOV A,R1
 5041 B notkey_fetch
 5050 
 5059 .notkeyB
 5068 CMP R0,#&FF
 5077 ANDEQ R0,R13,#&FF
 5086 BEQ notkeyB2
 5095 CMP R0,#&1F
 5104 BNE notkempB        \\ DS ; was MOVNE R0,#&FF
 5113 BL kempston2
 5122 .notkeyB2
 5131 AND BC,BC,#&FF
 5140 ADD BC,BC,R0,LSL#8
 5149 B notkey_fetch
 5158 .notkempB           \\ DS ; to .notkeyC
 5167 ADD R0,BC,#3
 5176 TEQ R0,#&C000
 5185 TEQNE R0,#&10000
 5194 MOVNE R1,#&FF
 5203 FNsetR3
 5212 LDREQ R0,[R3,#port_FFFD]
 5221 SWIEQ "XAYSound_Read"
 5230 MOV R0,R1
 5239 B notkeyB2
 5248 
 5257 .notkeyC
 5266 CMP R0,#&FF
 5275 ANDEQ R0,R13,#&FF
 5284 BEQ notkeyC2
 5293 CMP R0,#&1F
 5302 BNE notkempC        \\ DS ; was MOVNE R0,#&FF
 5311 BLEQ kempston2
 5320 .notkeyC2
 5329 AND BC,BC,#&FF00
 5338 ADD BC,BC,R0
 5347 B notkey_fetch
 5356 .notkempC           \\ DS ; to .notkeyD
 5365 ADD R0,BC,#3
 5374 TEQ R0,#&C000
 5383 TEQNE R0,#&10000
 5392 MOVNE R1,#&FF
 5401 FNsetR3
 5410 LDREQ R0,[R3,#port_FFFD]
 5419 SWIEQ "XAYSound_Read"
 5428 MOV R0,R1
 5437 B notkeyC2
 5446 
 5455 .notkeyD
 5464 CMP R0,#&FF
 5473 ANDEQ R0,R13,#&FF
 5482 BEQ notkeyD2
 5491 CMP R0,#&1F
 5500 BNE notkempD        \\ DS ; was MOVNE R0,#&FF
 5509 BL kempston2
 5518 .notkeyD2
 5527 AND DE,DE,#&FF
 5536 ADD DE,DE,R0,LSL#8
 5545 B notkey_fetch
 5554 .notkempD           \\ DS ; to .notkeyE
 5563 ADD R0,BC,#3
 5572 TEQ R0,#&C000
 5581 TEQNE R0,#&10000
 5590 MOVNE R1,#&FF
 5599 FNsetR3
 5608 LDREQ R0,[R3,#port_FFFD]
 5617 SWIEQ "XAYSound_Read"
 5626 MOV R0,R1
 5635 B notkeyD2
 5644 
 5653 .notkeyE
 5662 CMP R0,#&FF
 5671 ANDEQ R0,R13,#&FF
 5680 BEQ notkeyE2
 5689 CMP R0,#&1F
 5698 BNE notkempE        \\ DS ; was MOVNE R0,#&FF
 5707 BL kempston2
 5716 .notkeyE2
 5725 AND DE,DE,#&FF00
 5734 ADD DE,DE,R0
 5743 B notkey_fetch
 5752 .notkempE           \\ DS ; to .notkeyH
 5761 ADD R0,BC,#3
 5770 TEQ R0,#&C000
 5779 TEQNE R0,#&10000
 5788 MOVNE R1,#&FF
 5797 FNsetR3
 5806 LDREQ R0,[R3,#port_FFFD]
 5815 SWIEQ "XAYSound_Read"
 5824 MOV R0,R1
 5833 B notkeyE2
 5842 
 5851 .notkeyH
 5860 CMP R0,#&FF
 5869 ANDEQ R0,R13,#&FF
 5878 BEQ notkeyH2
 5887 CMP R0,#&1F
 5896 BNE notkempH        \\ DS ; was MOVNE R0,#&FF
 5905 BL kempston2
 5914 .notkeyH2
 5923 AND HL,HL,#&FF
 5932 ADD HL,HL,R0,LSL#8
 5941 B notkey_fetch
 5950 .notkempH           \\ DS ; to .notkeyL
 5959 ADD R0,BC,#3
 5968 TEQ R0,#&C000
 5977 TEQNE R0,#&10000
 5986 MOVNE R1,#&FF
 5995 FNsetR3
 6004 LDREQ R0,[R3,#port_FFFD]
 6013 SWIEQ "XAYSound_Read"
 6022 MOV R0,R1
 6031 B notkeyH2
 6040 
 6049 .notkeyL
 6058 CMP R0,#&FF
 6067 ANDEQ R0,R13,#&FF
 6076 BEQ notkeyL2
 6085 CMP R0,#&1F
 6094 BNE notkempL        \\ DS ; was MOVNE R0,#&FF
 6103 BL kempston2
 6112 .notkeyL2
 6121 AND HL,HL,#&FF00
 6130 ADD HL,HL,R0
 6139 B notkey_fetch
 6148 .notkempL           \\ DS ; to .kempston2
 6157 ADD R0,BC,#3
 6166 TEQ R0,#&C000
 6175 TEQNE R0,#&10000
 6184 MOVNE R1,#&FF
 6193 FNsetR3
 6202 LDREQ R0,[R3,#port_FFFD]
 6211 SWIEQ "XAYSound_Read"
 6220 MOV R0,R1
 6229 B notkeyL2
 6238 
 6247 .kempston2
 6256 FNkempston(0)
 6265 MOV PC,R14
 6274 
 6283 .port_FF
 6292 CMP R13,#&100
 6301 MOVLT A,RI,LSR#25
 6310 MOVGE A,#&FF
 6319 ]:IF debug%>003 THEN [OPTp:FNpzs_c(A,0):]
 6328 [OPTp
 6337 FNfetch2(2,11)
 6346 
 6355 .port_FF_noflags
 6364 CMP R13,#&100
 6373 MOVLT A,RI,LSR#25
 6382 MOVGE A,#&FF
 6391 FNfetch2(2,11)
 6400 
 6409 
 6418 .kempston_noflags
 6427 FNkempston(A)
 6436 FNfetch2(2,11)
 6445 
 6454 .kempston
 6463 FNkempston(A)
 6472 ]:IF debug%>004 THEN [OPTp:FNpzs_c(A,0):]
 6481 [OPTp
 6490 FNfetch2(2,11)
 6499 
 6508 .IN_A_c
 6517 AND R0,BC,#&FF
 6526 CMP R0,#&FE:BNE notkeyA
 6535 MOV R1,BC,LSR#8
 6544 FNreadkey(1)
 6553 MOV A,R14
 6562 ]:IF debug%>005 THEN [OPTp:FNpzs_c(A,0):]
 6571 [OPTp
 6580 FNfetch2(2,12)
 6589 
 6598 .IN_B_c
 6607 AND R0,BC,#&FF
 6616 CMP R0,#&FE:BNE notkeyB
 6625 MOV R1,BC,LSR#8
 6634 FNreadkey(1)
 6643 AND BC,BC,#&FF
 6652 ADD BC,BC,R14,LSL#8
 6661 ]:IF debug%>006 THEN [OPTp:FNpzs_c(14,0):]
 6670 [OPTp
 6679 FNfetch2(2,12)
 6688 
 6697 .IN_C_c
 6706 AND R0,BC,#&FF
 6715 CMP R0,#&FE:BNE notkeyC
 6724 MOV R1,BC,LSR#8
 6733 FNreadkey(1)
 6742 AND BC,BC,#&FF00
 6751 ADD BC,BC,R14
 6760 ]:IF debug%>007 THEN [OPTp:FNpzs_c(14,0):]
 6769 [OPTp
 6778 FNfetch2(2,12)
 6787 
 6796 .IN_D_c
 6805 AND R0,BC,#&FF
 6814 CMP R0,#&FE:BNE notkeyD
 6823 MOV R1,BC,LSR#8
 6832 FNreadkey(1)
 6841 AND DE,DE,#&FF
 6850 ADD DE,DE,R14,LSL#8
 6859 ]:IF debug%>008 THEN [OPTp:FNpzs_c(14,0):]
 6868 [OPTp
 6877 FNfetch2(2,12)
 6886 
 6895 .IN_E_c
 6904 AND R0,BC,#&FF
 6913 CMP R0,#&FE:BNE notkeyE
 6922 MOV R1,BC,LSR#8
 6931 FNreadkey(1)
 6940 AND DE,DE,#&FF00
 6949 ADD DE,DE,R14
 6958 ]:IF debug%>009 THEN [OPTp:FNpzs_c(14,0):]
 6967 [OPTp
 6976 FNfetch2(2,12)
 6985 
 6994 .IN_H_c
 7003 AND R0,BC,#&FF
 7012 CMP R0,#&FE:BNE notkeyH
 7021 MOV R1,BC,LSR#8
 7030 FNreadkey(1)
 7039 AND HL,HL,#&FF
 7048 ADD HL,HL,R14,LSL#8
 7057 ]:IF debug%>010 THEN [OPTp:FNpzs_c(14,0):]
 7066 [OPTp
 7075 FNfetch2(2,12)
 7084 
 7093 .IN_L_c
 7102 AND R0,BC,#&FF
 7111 CMP R0,#&FE:BNE notkeyL
 7120 MOV R1,BC,LSR#8
 7129 FNreadkey(1)
 7138 AND HL,HL,#&FF00
 7147 ADD HL,HL,R14
 7156 ]:IF debug%>011 THEN [OPTp:FNpzs_c(14,0):]
 7165 [OPTp
 7174 FNfetch2(2,12)
 7183 
 7192 .INI
 7201 .INIR
 7210 .IND
 7219 .INDR
 7228 FNfetch2(2,11)
 7237 
 7246 .OUT_n_A
 7255 ADD R0,zpc,#1<<16
 7264 FNldrb2(0,3,0)
 7273 MOV R1,A
 7282 
 7291 .out_all
 7300 AND R14,R0,#&FF     \\ DS ; now using branch table approach
 7309 TEQ R14,#&FE        \\ DS ; (should be more maintainable)
 7318 BEQ out_FE
 7327 ADD R0,R0,#3
 7336 TEQ R0,#&C000  ; &8000      ; J.G.Harston's patch
 7345 BEQ out_BFFD   ;  out_7FFD
 7354 TEQ R0,#&10000 ; C000
 7363 BEQ out_FFFD   ; out_BFFD
 7372 TEQ R14,#&FD   ;R0,#&10000
 7381 BEQ out_7FFD   ; out_FFFD
 7390 FNfetch2(2,11)
 7399 
 7408 .out_FE
 7417 FNsetR3
 7426 LDRB R0,[R3,#border_col]
 7435 AND R14,R1,#%111
 7444 CMP R14,R0
 7453 BEQ not_border
 7462 FNsetR3
 7471 LDR R0,[R3,#windowhandle]
 7480 STRB R14,[R3,#border_col]
 7489 CMP R0,#0
 7498 LDREQ PC,go_border ; don't do border if multitasking
 7507 .not_border
 7516 ; sound bit is bit 4 of A
 7525 ; R13 is number of T-states, counting down (see FNfetch2)
 7534 ; reset every 1/50th sec
 7543 ; 3,500,000 T-states per sec
 7552 BL d_out1
 7561 FNfetch2(2,11)
 7570 
 7579 .OUT_c_A
 7588 MOV R1,A
 7597 .out_bc
 7606 MOV R0,BC           \\ DS
 7615 B out_all
 7624 
 7633 .OUT_c_B
 7642 MOV R1,BC,LSR#8
 7651 B out_bc
 7660 
 7669 .OUT_c_C
 7678 AND R1,BC,#&FF
 7687 B out_bc
 7696 
 7705 .OUT_c_D
 7714 MOV R1,DE,LSR#8
 7723 B out_bc
 7732 
 7741 .OUT_c_E
 7750 AND R1,DE,#&FF
 7759 B out_bc
 7768 
 7777 .OUT_c_H
 7786 MOV R1,HL,LSR#8
 7795 B out_bc
 7804 
 7813 .OUT_c_L
 7822 AND R1,HL,#&FF
 7831 B out_bc
 7840 
 7849 .out_7FFD
 7858 ; R1 is what is output'd to port &7FFD
 7867 FNsetR3
 7876 LDRB R14,[R3,#port_7FFD]
 7885 AND R1,R1,#%111111
 7894 
 7903 TST R14,#%100000 : BNE no_7FFD ; paging disabled
 7912 STRB R1,[R3,#port_7FFD]
 7921 
 7930 AND R0,R1,#%111
 7939 MOV R3,#code%
 7948 MOV R14,#(Z80mem-&4000)>>12 ; RAM n - &28000+&4000*n
 7957 ADD R14,R14,R0,LSL#2
 7966 STRB R14,[R3,#3]
 7975 
 7984 TST R1,#%10000
 7993 MOVEQ R14,#Z80mem>>12         ; ROM 0
 8002 MOVNE R14,#(Z80mem+&4000)>>12 ; ROM 1
 8011 STRB R14,[R3]
 8020 
 8029 .no_7FFD
 8038 FNfetch2(2,11)
 8047 
 8056 .setup_7FFD
 8065 MOV R11,R14
 8074 ; R1 is what is output'd to port &7FFD
 8083 FNsetR3
 8092 LDRB R1,[R3,#port_7FFD]
 8101 AND R1,R1,#%111111
 8110 STRB R1,[R3,#port_7FFD]
 8119 
 8128 AND R0,R1,#%111
 8137 MOV R3,#code%
 8146 MOV R14,#(Z80mem-&4000)>>12 ; RAM n - &28000+&4000*n
 8155 ADD R14,R14,R0,LSL#2
 8164 STRB R14,[R3,#3]
 8173 
 8182 TST R1,#%10000
 8191 MOVEQ R14,#Z80mem>>12         ; ROM 0
 8200 MOVNE R14,#(Z80mem+&4000)>>12 ; ROM 1
 8209 STRB R14,[R3]
 8218 MOV PC,R11
 8227 
 8236 .cpystore           \\ DS
 8245 =STRING$(32,CHR$ 0) \\ DS
 8254 
 8263 .out_BFFD
 8272 FNsetR3
 8281 LDR R0,[R3,#port_FFFD]
 8290 MOV R14,R2:MOV R2,R13 ; timing
 8299 SWI "XAYSound_Write"
 8308 MOV R2,R14:B no_7FFD
 8317 
 8326 .out_FFFD
 8335 AND R1,R1,#15
 8344 FNsetR3
 8353 STR R1,[R3,#port_FFFD]
 8362 B no_7FFD
 8371 
 8380 .OUTI
 8389 FNldrb(1,3,HL)
 8398 ADD HL,HL,#1
 8407 .out_decb
 8416 MOV R0,BC
 8425 MOV HL,HL,LSL #16
 8434 MOV HL,HL,LSR #16
 8443 SUB BC,BC,#256
 8452 MOV BC,BC,LSL #16
 8461 MOV BC,BC,LSR #16
 8470 TST BC,#&FF00
 8479 BIC F,F,  #%01010100 \\ MRB
 8488 ORREQ F,F,#%01000010 \\ MRB
 8497 ORRNE F,F,#%00000010 \\ MRB
 8506 SUB R13,R13,#5       \\ MRB 16 T STATES
 8515 B out_all
 8524 
 8533 .OTIR
 8542 ;LDRB R1,[R3,HL]
 8551 FNldrb(1,3,HL)
 8560 ADD HL,HL,#1
 8569 .out_decb_r
 8578 MOV R0,BC
 8587 MOV HL,HL,LSL #16
 8596 MOV HL,HL,LSR #16
 8605 SUB BC,BC,#256
 8614 MOV BC,BC,LSL #16
 8623 MOV BC,BC,LSR #16
 8632 TST BC,#&FF00
 8641 ;BIC F,F,#%10110   \\ MRB
 8650 ;ORRNE F,F,#%100   \\ MRB
 8659 ORR F,F,#%01000010 \\ MRB
 8668 SUBNE zpc,zpc,#2<<16
 8677 SUBNE R13,R13,#10  \\ MRB 21 T STATES
 8686 SUBEQ R13,R13,#5   \\ MRB 16 T STATES
 8695 B out_all
 8704 
 8713 .OUTD
 8722 FNldrb(1,3,HL)
 8731 SUB HL,HL,#1
 8740 B out_decb
 8749 
 8758 .OTDR
 8767 FNldrb(1,3,HL)
 8776 SUB HL,HL,#1
 8785 B out_decb_r
 8794 
 8803 .EXX
 8812 FNsetR3
 8821 LDR R0,[R3,#bc2]
 8830 ADD R1,BC,DE,LSL#16
 8839 STR R1,[R3,#bc2]
 8848 MOV BC,R0,LSL#16
 8857 MOV BC,BC,LSR#16
 8866 MOV DE,R0,LSR#16
 8875 LDR R0,[R3,#hl2]
 8884 STR HL,[R3,#hl2]
 8893 MOV HL,R0
 8902 FNfetch2(1,4)
 8911 
 8920 .EX_AF
 8929 FNsetR3
 8938 LDRB R0,[R3,#a2]
 8947 STRB A,[R3,#a2]
 8956 MOV A,R0
 8965 LDRB R0,[R3,#f2]
 8974 STRB F,[R3,#f2]
 8983 BIC F,F,#&FF
 8992 ADD F,F,R0
 9001 FNfetch2(1,4)
 9010 
 9019 ="Main"
 9028 .maintable
 9037 ; 0-F
 9046 & NOP
 9055 & LD_BC_NN
 9064 & LD_bc_A
 9073 & INC_BC
 9082 & INC_B
 9091 & DEC_B
 9100 & LD_B_N
 9109 & RLCA
 9118 & EX_AF
 9127 & ADD_HL_BC
 9136 & LD_A_bc
 9145 & DEC_BC
 9154 & INC_C
 9163 & DEC_C
 9172 & LD_C_N
 9181 & RRCA
 9190 ; 10-1F
 9199 & DJNZ
 9208 & LD_DE_NN
 9217 & LD_de_A
 9226 & INC_DE
 9235 & INC_D
 9244 & DEC_D
 9253 & LD_D_N
 9262 & RLA
 9271 & JR
 9280 & ADD_HL_DE
 9289 & LD_A_de
 9298 & DEC_DE
 9307 & INC_E
 9316 & DEC_E
 9325 & LD_E_N
 9334 & RRA
 9343 ; 20-2F
 9352 & JRNZ
 9361 & LD_HL_NN
 9370 & LD_nn_HL
 9379 & INC_HL
 9388 & INC_H
 9397 & DEC_H
 9406 & LD_H_N
 9415 & DAA
 9424 & JRZ
 9433 & ADD_HL_HL
 9442 & LD_HL_nn
 9451 & DEC_HL
 9460 & INC_L
 9469 & DEC_L
 9478 & LD_L_N
 9487 & CPL
 9496 ; 30-3F
 9505 & JRNC
 9514 & LD_SP_NN
 9523 & LD_nn_A
 9532 & INC_SP
 9541 & INC_hl
 9550 & DEC_hl
 9559 & LD_hl_N
 9568 & SCF
 9577 & JRC
 9586 & ADD_HL_SP
 9595 & LD_A_nn
 9604 & DEC_SP
 9613 & INC_A
 9622 & DEC_A
 9631 & LD_A_N
 9640 & CCF
 9649 ; 40-4F
 9658 & LD_B_B
 9667 & LD_B_C
 9676 & LD_B_D
 9685 & LD_B_E
 9694 & LD_B_H
 9703 & LD_B_L
 9712 & LD_B_hl
 9721 & LD_B_A
 9730 & LD_C_B
 9739 & LD_C_C
 9748 & LD_C_D
 9757 & LD_C_E
 9766 & LD_C_H
 9775 & LD_C_L
 9784 & LD_C_hl
 9793 & LD_C_A
 9802 ; 50-5F
 9811 & LD_D_B
 9820 & LD_D_C
 9829 & LD_D_D
 9838 & LD_D_E
 9847 & LD_D_H
 9856 & LD_D_L
 9865 & LD_D_hl
 9874 & LD_D_A
 9883 & LD_E_B
 9892 & LD_E_C
 9901 & LD_E_D
 9910 & LD_E_E
 9919 & LD_E_H
 9928 & LD_E_L
 9937 & LD_E_hl
 9946 & LD_E_A
 9955 ; 60-6F
 9964 & LD_H_B
 9973 & LD_H_C
 9982 & LD_H_D
 9991 & LD_H_E
10000 & LD_H_H
10009 & LD_H_L
10018 & LD_H_hl
10027 & LD_H_A
10036 & LD_L_B
10045 & LD_L_C
10054 & LD_L_D
10063 & LD_L_E
10072 & LD_L_H
10081 & LD_L_L
10090 & LD_L_hl
10099 & LD_L_A
10108 ; 70-7F
10117 & LD_hl_B
10126 & LD_hl_C
10135 & LD_hl_D
10144 & LD_hl_E
10153 & LD_hl_H
10162 & LD_hl_L
10171 & HALT
10180 & LD_hl_A
10189 & LD_A_B
10198 & LD_A_C
10207 & LD_A_D
10216 & LD_A_E
10225 & LD_A_H
10234 & LD_A_L
10243 & LD_A_hl
10252 & LD_A_A
10261 ; 80-8F
10270 & ADD_A_B
10279 & ADD_A_C
10288 & ADD_A_D
10297 & ADD_A_E
10306 & ADD_A_H
10315 & ADD_A_L
10324 & ADD_A_hl
10333 & ADD_A_A
10342 & ADC_A_B
10351 & ADC_A_C
10360 & ADC_A_D
10369 & ADC_A_E
10378 & ADC_A_H
10387 & ADC_A_L
10396 & ADC_A_hl
10405 & ADC_A_A
10414 ; 90-9F
10423 & SUB_B
10432 & SUB_C
10441 & SUB_D
10450 & SUB_E
10459 & SUB_H
10468 & SUB_L
10477 & SUB_hl
10486 & SUB_A
10495 & SBC_A_B
10504 & SBC_A_C
10513 & SBC_A_D
10522 & SBC_A_E
10531 & SBC_A_H
10540 & SBC_A_L
10549 & SBC_A_hl
10558 & SBC_A_A
10567 ; A0-AF
10576 & and_B
10585 & and_C
10594 & and_D
10603 & and_E
10612 & and_H
10621 & and_L
10630 & and_hl
10639 & and_A
10648 & xor_B
10657 & xor_C
10666 & xor_D
10675 & xor_E
10684 & xor_H
10693 & xor_L
10702 & xor_hl
10711 & xor_A
10720 ; B0-BF
10729 & or_B
10738 & or_C
10747 & or_D
10756 & or_E
10765 & or_H
10774 & or_L
10783 & or_hl
10792 & or_A
10801 & CP_B
10810 & CP_C
10819 & CP_D
10828 & CP_E
10837 & CP_H
10846 & CP_L
10855 & CP_hl
10864 & CP_A
10873 ; C0-CF
10882 & RETNZ
10891 & POP_BC
10900 & JPNZ
10909 & JP
10918 & callNZ
10927 & PUSH_BC
10936 & ADD_A_N
10945 & RST_00
10954 & RETZ
10963 & RET
10972 & JPZ
10981 & opcode_CB
10990 & callZ
10999 & call
11008 & ADC_A_N
11017 & RST_08
11026 ; D0-DF
11035 & RETNC
11044 & POP_DE
11053 & JPNC
11062 & OUT_n_A
11071 & callNC
11080 & PUSH_DE
11089 & SUB_N
11098 & RST_10
11107 & RETC
11116 & EXX
11125 & JPC
11134 & IN_A_n
11143 & callC
11152 & opcode_DD
11161 & SBC_A_N
11170 & RST_18
11179 ; E0-EF
11188 & RETPO
11197 & POP_HL
11206 & JPPO
11215 & EX_sp_HL
11224 & callPO
11233 & PUSH_HL
11242 & and_N
11251 & RST_20
11260 & RETPE
11269 & JP_HL
11278 & JPPE
11287 & EX_DE_HL
11296 & callPE
11305 & opcode_ED
11314 & xor_N
11323 & RST_28
11332 ; F0,FF
11341 & RETP
11350 & POP_AF
11359 & JPP
11368 & DI
11377 & callP
11386 & PUSH_AF
11395 & or_N
11404 & RST_30
11413 & RETM
11422 & LD_SP_HL
11431 & JPM
11440 & EI
11449 & callM
11458 & opcode_FD
11467 & CP_N
11476 & RST_38
11485 ; end of primary opcode table
11494 
11503 
11512 .LD_BC_NN
11521 ADD R0,zpc,#1<<16 : FNldrb2(BC,3,0)
11530 ADD R0,zpc,#2<<16 : FNldrb2(0,3,0)
11539 ADD BC,BC,R0,LSL#8
11548 FNfetch2(3,10)
11557 
11566 .LD_DE_NN
11575 ADD R0,zpc,#1<<16 : FNldrb2(DE,3,0)
11584 ADD R0,zpc,#2<<16 : FNldrb2(0,3,0)
11593 ADD DE,DE,R0,LSL#8
11602 FNfetch2(3,10)
11611 
11620 .LD_HL_NN
11629 ADD R0,zpc,#1<<16 : FNldrb2(HL,3,0)
11638 ADD R0,zpc,#2<<16 : FNldrb2(0,3,0)
11647 ADD HL,HL,R0,LSL#8
11656 FNfetch2(3,10)
11665 
11674 .LD_SP_NN
11683 ADD R0,zpc,#1<<16 : FNldrb2(1,3,0)
11692 ADD R0,zpc,#2<<16 : FNldrb2(0,3,0)
11701 FNandFFFF(zSP)
11710 ADD zSP,zSP,R1,LSL#16
11719 ADD zSP,zSP,R0,LSL#24
11728 FNfetch2(3,10)
11737 
11746 .LD_IX_NN
11755 .DD%(&21)
11764 LDRB IX,[R1,#1]!
11773 LDRB R0,[R1,#1]
11782 ADD IX,IX,R0,LSL#8
11791 FNfetch2(4,14)
11800 
11809 .LD_IY_NN
11818 .FD%(&21)
11827 LDRB IY,[R1,#1]!
11836 LDRB R0,[R1,#1]
11845 ADD IY,IY,R0,LSL#8
11854 FNfetch2(4,14)
11863 
11872 .LD_bc_A
11881 FNstr(A,3,BC)
11890 FNfetch2(1,7)
11899 
11908 .LD_de_A
11917 FNstr(A,3,DE)
11926 FNfetch2(1,7)
11935 
11944 .LD_nn_HL
11953 ADD R0,zpc,#1<<16 : FNldrb2(1,3,0)
11962 ADD R0,zpc,#2<<16 : FNldrb2(0,3,0)
11971 ADD R1,R1,R0,LSL#8
11980 FNstr(HL,3,1)
11989 ADD R1,R1,#1
11998 MOV R0,HL,LSR#8
12007 FNstr(0,3,1)
12016 FNfetch2(3,16)
12025 
12034 .LD_nn_IX
12043 .DD%(&22)
12052 LDRB R0,[R1,#1]!
12061 LDRB R1,[R1,#1]
12070 ADD R0,R0,R1,LSL#8
12079 FNstr(IX,3,0)
12088 ADD R0,R0,#1
12097 MOV R1,IX,LSR#8
12106 FNstr(1,3,0)
12115 FNfetch2(4,20)
12124 
12133 .LD_nn_IY
12142 .FD%(&22)
12151 LDRB R0,[R1,#1]!
12160 LDRB R1,[R1,#1]
12169 ADD R0,R0,R1,LSL#8
12178 FNstr(IY,3,0)
12187 ADD R0,R0,#1
12196 MOV R1,IY,LSR#8
12205 FNstr(1,3,0)
12214 FNfetch2(4,20)
12223 
12232 .LD_nn_A
12241 ADD R0,zpc,#1<<16 : FNldrb2(1,3,0)
12250 ADD R0,zpc,#2<<16 : FNldrb2(0,3,0)
12259 
12268 ADD R1,R1,R0,LSL#8
12277 FNstr(A,3,1)
12286 FNfetch2(3,13)
12295 
12304 .LD_A_N
12313 FNgetnext(A,0)
12322 FNfetch2(2,7)
12331 
12340 .LD_B_N
12349 FNgetnext(0,0)
12358 BIC BC,BC,#&FF00
12367 ADD BC,BC,R0,LSL#8
12376 FNfetch2(2,7)
12385 
12394 .LD_D_N
12403 FNgetnext(0,0)
12412 BIC DE,DE,#&FF00
12421 ADD DE,DE,R0,LSL#8
12430 FNfetch2(2,7)
12439 
12448 .LD_H_N
12457 FNgetnext(0,0)
12466 BIC HL,HL,#&FF00
12475 ADD HL,HL,R0,LSL#8
12484 FNfetch2(2,7)
12493 
12502 .LD_C_N
12511 FNgetnext(0,0)
12520 BIC BC,BC,#&FF
12529 ADD BC,BC,R0
12538 FNfetch2(2,7)
12547 
12556 .LD_E_N
12565 FNgetnext(0,0)
12574 BIC DE,DE,#&FF
12583 ADD DE,DE,R0
12592 FNfetch2(2,7)
12601 
12610 .LD_L_N
12619 FNgetnext(0,0)
12628 BIC HL,HL,#&FF
12637 ADD HL,HL,R0
12646 FNfetch2(2,7)
12655 
12664 .LD_A_B
12673 MOV A,BC,LSR#8
12682 FNfetch2(1,4)
12691 
12700 .LD_A_C
12709 AND A,BC,#&FF
12718 FNfetch2(1,4)
12727 
12736 .LD_A_D
12745 MOV A,DE,LSR#8
12754 FNfetch2(1,4)
12763 
12772 .LD_A_E
12781 AND A,DE,#&FF
12790 FNfetch2(1,4)
12799 
12808 .LD_A_H
12817 MOV A,HL,LSR#8
12826 FNfetch2(1,4)
12835 
12844 .LD_A_L
12853 AND A,HL,#&FF
12862 .LD_A_A
12871 FNfetch2(1,4)
12880 
12889 .LD_B_A
12898 BIC BC,BC,#&FF00
12907 ADD BC,BC,A,LSL#8
12916 .LD_B_B
12925 FNfetch2(1,4)
12934 
12943 .LD_B_C
12952 BIC BC,BC,#&FF00
12961 ADD BC,BC,BC,LSL#8
12970 FNfetch2(1,4)
12979 
12988 .LD_B_D
12997 AND R0,DE,#&FF00
13006 BIC BC,BC,#&FF00
13015 ADD BC,BC,R0
13024 FNfetch2(1,4)
13033 
13042 .LD_B_E
13051 AND R0,DE,#&FF
13060 BIC BC,BC,#&FF00
13069 ADD BC,BC,R0,LSL#8
13078 FNfetch2(1,4)
13087 
13096 .LD_B_H
13105 AND R0,HL,#&FF00
13114 BIC BC,BC,#&FF00
13123 ADD BC,BC,R0
13132 FNfetch2(1,4)
13141 
13150 .LD_B_L
13159 AND R0,HL,#&FF
13168 BIC BC,BC,#&FF00
13177 ADD BC,BC,R0,LSL#8
13186 FNfetch2(1,4)
13195 
13204 .LD_C_A
13213 BIC BC,BC,#&FF
13222 ADD BC,BC,A
13231 FNfetch2(1,4)
13240 
13249 .LD_C_B
13258 BIC BC,BC,#&FF
13267 ADD BC,BC,BC,LSR#8
13276 .LD_C_C
13285 FNfetch2(1,4)
13294 
13303 .LD_C_D
13312 MOV R0,DE,LSR#8
13321 BIC BC,BC,#&FF
13330 ADD BC,BC,R0
13339 FNfetch2(1,4)
13348 
13357 .LD_C_E
13366 AND R0,DE,#&FF
13375 BIC BC,BC,#&FF
13384 ADD BC,BC,R0
13393 FNfetch2(1,4)
13402 
13411 .LD_C_H
13420 MOV R0,HL,LSR#8
13429 BIC BC,BC,#&FF
13438 ADD BC,BC,R0
13447 FNfetch2(1,4)
13456 
13465 .LD_C_L
13474 AND R0,HL,#&FF
13483 BIC BC,BC,#&FF
13492 ADD BC,BC,R0
13501 FNfetch2(1,4)
13510 
13519 .LD_D_A
13528 BIC DE,DE,#&FF00
13537 ADD DE,DE,A,LSL#8
13546 FNfetch2(1,4)
13555 
13564 .LD_D_B
13573 AND R0,BC,#&FF00
13582 BIC DE,DE,#&FF00
13591 ADD DE,DE,R0
13600 FNfetch2(1,4)
13609 
13618 .LD_D_C
13627 AND R0,BC,#&FF
13636 BIC DE,DE,#&FF00
13645 ADD DE,DE,R0,LSL#8
13654 .LD_D_D
13663 FNfetch2(1,4)
13672 
13681 .LD_D_E
13690 BIC DE,DE,#&FF00
13699 ADD DE,DE,DE,LSL#8
13708 FNfetch2(1,4)
13717 
13726 .LD_D_H
13735 AND R0,HL,#&FF00
13744 BIC DE,DE,#&FF00
13753 ADD DE,DE,R0
13762 FNfetch2(1,4)
13771 
13780 .LD_D_L
13789 AND R0,HL,#&FF
13798 BIC DE,DE,#&FF00
13807 ADD DE,DE,R0,LSL#8
13816 FNfetch2(1,4)
13825 
13834 .LD_E_A
13843 BIC DE,DE,#&FF
13852 ADD DE,DE,A
13861 FNfetch2(1,4)
13870 
13879 .LD_E_B
13888 MOV R0,BC,LSR#8
13897 BIC DE,DE,#&FF
13906 ADD DE,DE,R0
13915 FNfetch2(1,4)
13924 
13933 .LD_E_C
13942 AND R0,BC,#&FF
13951 BIC DE,DE,#&FF
13960 ADD DE,DE,R0
13969 FNfetch2(1,4)
13978 
13987 .LD_E_D
13996 BIC DE,DE,#&FF
14005 ADD DE,DE,DE,LSR#8
14014 .LD_E_E
14023 FNfetch2(1,4)
14032 
14041 .LD_E_H
14050 MOV R0,HL,LSR#8
14059 BIC DE,DE,#&FF
14068 ADD DE,DE,R0
14077 FNfetch2(1,4)
14086 
14095 .LD_E_L
14104 AND R0,HL,#&FF
14113 BIC DE,DE,#&FF
14122 ADD DE,DE,R0
14131 FNfetch2(1,4)
14140 
14149 .LD_H_A
14158 BIC HL,HL,#&FF00
14167 ADD HL,HL,A,LSL#8
14176 FNfetch2(1,4)
14185 
14194 .LD_H_B
14203 AND R0,BC,#&FF00
14212 BIC HL,HL,#&FF00
14221 ADD HL,HL,R0
14230 FNfetch2(1,4)
14239 
14248 .LD_H_C
14257 AND R0,BC,#&FF
14266 BIC HL,HL,#&FF00
14275 ADD HL,HL,R0,LSL#8
14284 FNfetch2(1,4)
14293 
14302 .LD_H_D
14311 AND R0,DE,#&FF00
14320 BIC HL,HL,#&FF00
14329 ADD HL,HL,R0
14338 FNfetch2(1,4)
14347 
14356 .LD_H_E
14365 AND R0,DE,#&FF
14374 BIC HL,HL,#&FF00
14383 ADD HL,HL,R0,LSL#8
14392 FNfetch2(1,4)
14401 
14410 .LD_H_L
14419 BIC HL,HL,#&FF00
14428 ADD HL,HL,HL,LSL#8
14437 .LD_H_H
14446 FNfetch2(1,4)
14455 
14464 .LD_L_A
14473 BIC HL,HL,#&FF
14482 ADD HL,HL,A
14491 FNfetch2(1,4)
14500 
14509 .LD_L_B
14518 MOV R0,BC,LSR#8
14527 BIC HL,HL,#&FF
14536 ADD HL,HL,R0
14545 FNfetch2(1,4)
14554 
14563 .LD_L_C
14572 AND R0,BC,#&FF
14581 BIC HL,HL,#&FF
14590 ADD HL,HL,R0
14599 FNfetch2(1,4)
14608 
14617 .LD_L_D
14626 MOV R0,DE,LSR#8
14635 BIC HL,HL,#&FF
14644 ADD HL,HL,R0
14653 FNfetch2(1,4)
14662 
14671 .LD_L_E
14680 AND R0,DE,#&FF
14689 BIC HL,HL,#&FF
14698 ADD HL,HL,R0
14707 FNfetch2(1,4)
14716 
14725 .LD_L_H
14734 BIC HL,HL,#&FF
14743 ADD HL,HL,HL,LSR#8
14752 .LD_L_L
14761 FNfetch2(1,4)
14770 
14779 .LD_A_hl
14788 FNldrb(A,3,HL)
14797 FNfetch2(1,7)
14806 
14815 .LD_B_hl
14824 FNldrb(0,3,HL)
14833 BIC BC,BC,#&FF00
14842 ADD BC,BC,R0,LSL#8
14851 FNfetch2(1,7)
14860 
14869 .LD_D_hl
14878 FNldrb(0,3,HL)
14887 BIC DE,DE,#&FF00
14896 ADD DE,DE,R0,LSL#8
14905 FNfetch2(1,7)
14914 
14923 .LD_H_hl
14932 FNldrb(0,3,HL)
14941 BIC HL,HL,#&FF00
14950 ADD HL,HL,R0,LSL#8
14959 FNfetch2(1,7)
14968 
14977 .LD_B_ixd
14986 .DD%(&46)
14995 LDRB R1,[R1,#1]
15004 FNaddixiy(1,IX)
15013 FNldrb(0,3,1)
15022 BIC BC,BC,#&FF00
15031 ADD BC,BC,R0,LSL#8
15040 FNfetch2(3,19)
15049 
15058 .LD_B_iyd
15067 .FD%(&46)
15076 LDRB R1,[R1,#1]
15085 FNaddixiy(1,IY)
15094 FNldrb(0,3,1)
15103 BIC BC,BC,#&FF00
15112 ADD BC,BC,R0,LSL#8
15121 FNfetch2(3,19)
15130 
15139 .LD_D_ixd
15148 .DD%(&56)
15157 LDRB R1,[R1,#1]
15166 FNaddixiy(1,IX)
15175 FNldrb(0,3,1)
15184 BIC DE,DE,#&FF00
15193 ADD DE,DE,R0,LSL#8
15202 FNfetch2(3,19)
15211 
15220 .LD_D_iyd
15229 .FD%(&56)
15238 LDRB R1,[R1,#1]
15247 FNaddixiy(1,IY)
15256 FNldrb(0,3,1)
15265 BIC DE,DE,#&FF00
15274 ADD DE,DE,R0,LSL#8
15283 FNfetch2(3,19)
15292 
15301 .LD_IXh_B
15310 .DD%(&60)
15319 BIC IX,IX,#&FF00
15328 AND R0,BC,#&FF00
15337 ADD IX,IX,R0
15346 FNfetch2(2,8)
15355 
15364 .LD_H_ixd
15373 .DD%(&66)
15382 LDRB R1,[R1,#1]
15391 FNaddixiy(1,IX)
15400 FNldrb(0,3,1)
15409 BIC HL,HL,#&FF00
15418 ADD HL,HL,R0,LSL#8
15427 FNfetch2(3,19)
15436 
15445 .LD_H_iyd
15454 .FD%(&66)
15463 LDRB R1,[R1,#1]
15472 FNaddixiy(1,IY)
15481 FNldrb(0,3,1)
15490 BIC HL,HL,#&FF00
15499 ADD HL,HL,R0,LSL#8
15508 FNfetch2(3,19)
15517 
15526 .LD_C_hl
15535 FNldrb(0,3,HL)
15544 BIC BC,BC,#&FF
15553 ADD BC,BC,R0
15562 FNfetch2(1,7)
15571 
15580 .LD_E_hl
15589 FNldrb(0,3,HL)
15598 BIC DE,DE,#&FF
15607 ADD DE,DE,R0
15616 FNfetch2(1,7)
15625 
15634 .LD_L_hl
15643 FNldrb(0,3,HL)
15652 BIC HL,HL,#&FF
15661 ADD HL,HL,R0
15670 FNfetch2(1,7)
15679 
15688 .LD_A_ixd
15697 .DD%(&7E)
15706 LDRB R1,[R1,#1]
15715 FNaddixiy(1,IX)
15724 FNldrb(A,3,1)
15733 FNfetch2(3,19)
15742 
15751 .LD_A_iyd
15760 .FD%(&7E)
15769 LDRB R1,[R1,#1]
15778 FNaddixiy(1,IY)
15787 FNldrb(A,3,1)
15796 FNfetch2(3,19)
15805 
15814 .LD_C_ixd
15823 .DD%(&4E)
15832 LDRB R1,[R1,#1]
15841 FNaddixiy(1,IX)
15850 FNldrb(0,3,1)
15859 BIC BC,BC,#&FF
15868 ADD BC,BC,R0
15877 FNfetch2(3,19)
15886 
15895 .LD_C_iyd
15904 .FD%(&4E)
15913 LDRB R1,[R1,#1]
15922 FNaddixiy(1,IY)
15931 FNldrb(0,3,1)
15940 BIC BC,BC,#&FF
15949 ADD BC,BC,R0
15958 FNfetch2(3,19)
15967 
15976 .LD_E_ixd
15985 .DD%(&5E)
15994 LDRB R1,[R1,#1]
16003 FNaddixiy(1,IX)
16012 FNldrb(0,3,1)
16021 BIC DE,DE,#&FF
16030 ADD DE,DE,R0
16039 FNfetch2(3,19)
16048 
16057 .LD_E_iyd
16066 .FD%(&5E)
16075 LDRB R1,[R1,#1]
16084 FNaddixiy(1,IY)
16093 FNldrb(0,3,1)
16102 BIC DE,DE,#&FF
16111 ADD DE,DE,R0
16120 FNfetch2(3,19)
16129 
16138 .LD_L_ixd
16147 .DD%(&6E)
16156 LDRB R1,[R1,#1]
16165 FNaddixiy(1,IX)
16174 FNldrb(0,3,1)
16183 BIC HL,HL,#&FF
16192 ADD HL,HL,R0
16201 FNfetch2(3,19)
16210 
16219 .LD_L_iyd
16228 .FD%(&6E)
16237 LDRB R1,[R1,#1]
16246 FNaddixiy(1,IY)
16255 FNldrb(0,3,1)
16264 BIC HL,HL,#&FF
16273 ADD HL,HL,R0
16282 FNfetch2(3,19)
16291 
16300 .LD_A_bc
16309 FNldrb(A,3,BC)
16318 FNfetch2(1,7)
16327 
16336 .LD_A_de
16345 FNldrb(A,3,DE)
16354 FNfetch2(1,7)
16363 
16372 .LD_A_nn
16381 FNgetnext2(1,0)
16390 ADD R1,R1,R0,LSL#8
16399 FNldrb(A,3,1)
16408 FNfetch2(3,13)
16417 
16426 .LD_HL_nn
16435 FNgetnext2(1,0)
16444 ADD R1,R1,R0,LSL#8
16453 FNldrb(0,3,1)
16462 ADD R1,R1,#1
16471 FNldrb(1,3,1)
16480 ADD HL,R0,R1,LSL#8
16489 FNfetch2(3,16)
16498 
16507 .LD_IX_nn
16516 .DD%(&2A)
16525 LDRB R0,[R1,#1]!
16534 LDRB R1,[R1,#1]
16543 ADD R0,R0,R1,LSL#8
16552 FNldrb(1,3,0)
16561 ADD R0,R0,#1
16570 FNldrb(0,3,0)
16579 ADD IX,R1,R0,LSL#8
16588 FNfetch2(4,20)
16597 
16606 .LD_IY_nn
16615 .FD%(&2A)
16624 LDRB R0,[R1,#1]!
16633 LDRB R1,[R1,#1]
16642 ADD R0,R0,R1,LSL#8
16651 FNldrb(1,3,0)
16660 ADD R0,R0,#1
16669 FNldrb(0,3,0)
16678 ADD IY,R1,R0,LSL#8
16687 FNfetch2(4,20)
16696 
16705 .LD_hl_N
16714 FNgetnext(0,0)
16723 FNstr(0,3,HL)
16732 FNfetch2(2,10)
16741 
16750 .LD_ixd_N
16759 .DD%(&36)
16768 LDRB R0,[R1,#2]
16777 LDRB R1,[R1,#1]
16786 FNaddixiy(1,IX)
16795 FNstr(0,3,1)
16804 FNfetch2(4,19)
16813 
16822 .LD_iyd_N
16831 .FD%(&36)
16840 LDRB R0,[R1,#2]
16849 LDRB R1,[R1,#1]
16858 FNaddixiy(1,IY)
16867 FNstr(0,3,1)
16876 FNfetch2(4,19)
16885 
16894 .INC_A
16903 FNinc1(A,1)
16912 
16921 .INC_B
16930 FNinc2(BC,1)
16939 
16948 .INC_D
16957 FNinc2(DE,1)
16966 
16975 .INC_H
16984 FNinc2(HL,1)
16993 
17002 .INC_C
17011 FNinc1(BC,1)
17020 
17029 .INC_E
17038 FNinc1(DE,1)
17047 
17056 .INC_L
17065 FNinc1(HL,1)
17074 
17083 .INC_hl
17092 FNldrb(0,3,HL)
17101 ]
17110 IF debug%>012 THEN
17119 [OPTp
17128 ;TST R0,#15 ; MRB 30/1/99
17137 ADD R0,R0,#1:AND R0,R0,#255:FNzs_c(0,0)
17146 TST R0,#15 ; removed MRB 30/1/99
17155 ORRNE F,F,#flagH
17164 TEQ R0,#128:ORREQ F,F,#flagV ; changed to EQ from NE MRB 30/1/99
17173 ]
17182 OTHERWISE
17191 [OPTp
17200 AND R1,R0,#%1111 : CMP R1,#%1111 : ORREQ  F,F,#%10000 : BICNE  F,F,#%10000 ; H
17209 MOV R0,R0,LSL#24
17218 ADDS R0,R0,#&01000000
17227 FNsetupZSVN(0)
17236 MOV R0,R0,LSR#24
17245 
17254 ]
17263 ENDIF
17272 [OPTp
17281 FNstr(0,3,HL)
17290 FNfetch2(1,11)
17299 
17308 .INC_ixd
17317 .DD%(&34)
17326 LDRB R14,[R1,#1]
17335 FNaddixiy(14,IX)
17344 FNldrb(0,3,14)
17353 ]
17362 IF debug%>013 THEN
17371 [OPTp
17380 ;TST R0,#15 ; MRB 30/1/99
17389 ADD R0,R0,#1:AND R0,R0,#255:FNzs_c(0,0)
17398 TST R0,#15 ; removed MRB 30/1/99
17407 ORRNE F,F,#flagH
17416 TEQ R0,#128:ORREQ F,F,#flagV ; changed to EQ from NE MRB 30/1/99
17425 ]
17434 OTHERWISE
17443 [OPTp
17452 AND R1,R0,#%1111 : CMP R1,#%1111 : ORREQ  F,F,#%10000 : BICNE  F,F,#%10000 ; H
17461 MOV R0,R0,LSL#24
17470 ADDS R0,R0,#&01000000
17479 FNsetupZSVN(0)
17488 MOV R0,R0,LSR#24
17497 
17506 ]
17515 ENDIF
17524 [OPTp
17533 FNstr(0,3,14)
17542 FNfetch2(3,23)
17551 
17560 .INC_iyd
17569 .FD%(&34)
17578 LDRB R14,[R1,#1]
17587 FNaddixiy(14,IY)
17596 FNldrb(0,3,14)
17605 ]
17614 IF debug%>014 THEN
17623 [OPTp
17632 ;TST R0,#15 ; MRB 30/1/99
17641 ADD R0,R0,#1:AND R0,R0,#255:FNzs_c(0,0)
17650 TST R0,#15 ; removed MRB 30/1/99
17659 ORRNE F,F,#flagH
17668 TEQ R0,#128:ORREQ F,F,#flagV ; changed to EQ from NE MRB 30/1/99
17677 ]
17686 OTHERWISE
17695 [OPTp
17704 AND R1,R0,#%1111 : CMP R1,#%1111 : ORREQ  F,F,#%10000 : BICNE  F,F,#%10000 ; H
17713 MOV R0,R0,LSL#24
17722 ADDS R0,R0,#&01000000
17731 FNsetupZSVN(0)
17740 MOV R0,R0,LSR#24
17749 
17758 ]
17767 ENDIF
17776 [OPTp
17785 FNstr(0,3,14)
17794 FNfetch2(3,23)
17803 
17812 
17821 .DEC_hl
17830 FNldrb(0,3,HL)
17839 ]
17848 IF debug%>015 THEN
17857 [OPTp
17866 ANDS R1,R0,#%1111 ; MRB 23/1/99
17875 SUB R0,R0,#1:AND R0,R0,#255:FNzs_c(0,1)
17884 ORREQ  F,F,#flagH ; MRB 23/1/99
17893 TEQ R0,#127:ORRNE F,F,#flagV
17902 ; line removed MRB 23/1/99
17911 ]
17920 OTHERWISE
17929 [OPTp
17938 AND R1,R0,#%1111 : CMP R1,#0 : ORREQ  F,F,#%10000 : BICNE  F,F,#%10000 ; H
17947 MOV R0,R0,LSL#24
17956 MOVS R1,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
17965 SUBS R0,R0,#&01000000
17974 FNsetupZSVN(1)
17983 MOV R0,R0,LSR#24
17992 
18001 ]
18010 ENDIF
18019 [OPTp
18028 
18037 FNstr(0,3,HL)
18046 FNfetch2(1,11)
18055 
18064 .DEC_ixd
18073 .DD%(&35)
18082 LDRB R14,[R1,#1]
18091 FNaddixiy(14,IX)
18100 FNldrb(0,3,14)
18109 ]
18118 IF debug%>016 THEN
18127 [OPTp
18136 ANDS R1,R0,#%1111 ; MRB 23/1/99
18145 SUB R0,R0,#1:AND R0,R0,#255:FNzs_c(0,1)
18154 ORREQ  F,F,#flagH ; MRB 23/1/99
18163 TEQ R0,#127:ORRNE F,F,#flagV
18172 ; line removed MRB 23/1/99
18181 ]
18190 OTHERWISE
18199 [OPTp
18208 AND R1,R0,#%1111 : CMP R1,#0 : ORREQ  F,F,#%10000 : BICNE  F,F,#%10000 ; H
18217 MOV R0,R0,LSL#24
18226 MOVS R1,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
18235 SUBS R0,R0,#&01000000
18244 FNsetupZSVN(1)
18253 MOV R0,R0,LSR#24
18262 ]
18271 ENDIF
18280 [OPTp
18289 FNstr(0,3,14)
18298 FNfetch2(3,23)
18307 
18316 .DEC_iyd
18325 .FD%(&35)
18334 LDRB R14,[R1,#1]
18343 FNaddixiy(14,IY)
18352 FNldrb(0,3,14)
18361 ]
18370 IF debug%>017 THEN
18379 [OPTp
18388 ANDS R1,R0,#%1111 ; MRB 23/1/99
18397 SUB R0,R0,#1:AND R0,R0,#255:FNzs_c(0,1)
18406 ORREQ  F,F,#flagH ; MRB 23/1/99
18415 TEQ R0,#127:ORRNE F,F,#flagV
18424 ; line removed MRB 23/1/99
18433 ]
18442 OTHERWISE
18451 [OPTp
18460 AND R1,R0,#%1111 : CMP R1,#0 : ORREQ  F,F,#%10000 : BICNE  F,F,#%10000 ; H
18469 MOV R0,R0,LSL#24
18478 MOVS R1,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
18487 SUBS R0,R0,#&01000000
18496 FNsetupZSVN(1)
18505 MOV R0,R0,LSR#24
18514 
18523 ]
18532 ENDIF
18541 [OPTp
18550 FNstr(0,3,14)
18559 FNfetch2(3,23)
18568 
18577 .INC_BC
18586 ADD BC,BC,#1
18595 BIC BC,BC,#&10000
18604 FNfetch2(1,6)
18613 
18622 .INC_DE
18631 ADD DE,DE,#1
18640 BIC DE,DE,#&10000
18649 FNfetch2(1,6)
18658 
18667 .INC_HL
18676 ADD HL,HL,#1
18685 BIC HL,HL,#&10000
18694 FNfetch2(1,6)
18703 
18712 .INC_IX
18721 .DD%(&23)
18730 ADD IX,IX,#1
18739 BIC IX,IX,#&10000
18748 FNfetch2(2,6)
18757 
18766 .INC_IY
18775 .FD%(&23)
18784 ADD IY,IY,#1
18793 BIC IY,IY,#&10000
18802 FNfetch2(2,6)
18811 
18820 .INC_SP
18829 ADD zSP,zSP,#1 << 16
18838 FNfetch2(1,6)
18847 
18856 .DEC_BC
18865 SUB BC,BC,#1
18874 FNandFFFF(BC)
18883 FNfetch2(1,6)
18892 
18901 .DEC_DE
18910 SUB DE,DE,#1
18919 FNandFFFF(DE)
18928 FNfetch2(1,6)
18937 
18946 .DEC_HL
18955 SUB HL,HL,#1
18964 FNandFFFF(HL)
18973 FNfetch2(1,6)
18982 
18991 .DEC_SP
19000 SUB zSP,zSP,#1 << 16
19009 FNfetch2(1,6)
19018 
19027 .DEC_A
19036 FNdec1(A,1,4)
19045 
19054 .DEC_B
19063 FNdec2(BC,1,4)
19072 
19081 .DEC_D
19090 FNdec2(DE,1,4)
19099 
19108 .DEC_H
19117 FNdec2(HL,1,4)
19126 
19135 .DEC_C
19144 FNdec1(BC,1,4)
19153 
19162 .DEC_E
19171 FNdec1(DE,1,4)
19180 
19189 .DEC_L
19198 FNdec1(HL,1,4)
19207 
19216 .NOP
19225 FNfetch2(1,4)
19234 
19243 .DJNZ
19252 MOV R1,BC,LSR#8
19261 SUBS R1,R1,#1
19270 AND R1,R1,#&FF
19279 AND BC,BC,#&FF
19288 ADD BC,BC,R1,LSL#8
19297 BEQ fetch2
19306 FNJR(13)
19315 .fetch2
19324 FNfetch2(2,8)
19333 
19342 .JRNZ
19351 TST F,#%1000000
19360 BNE JRfetch
19369 .JR
19378 FNJR(12)
19387 
19396 .JRZ
19405 TST F,#%1000000
19414 BEQ JRfetch
19423 FNJR(12)
19432 
19441 .JRC
19450 TST F,#%1
19459 BEQ JRfetch
19468 FNJR(12)
19477 
19486 .JRNC
19495 TST F,#%1
19504 BNE JRfetch
19513 FNJR(12)
19522 
19531 .JRfetch
19540 FNfetch2(2,7)
19549 
19558 .JPNZ
19567 TST F,#%1000000
19576 BNE fetch3
19585 FNgetnext2(1,0)
19594 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
19603 FNfetch2(0,10)
19612 
19621 .JPZ
19630 TST F,#%1000000
19639 BEQ fetch3
19648 FNgetnext2(1,0)
19657 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
19666 FNfetch2(0,10)
19675 
19684 .JPNC
19693 TST F,#%1
19702 BNE fetch3
19711 FNgetnext2(1,0)
19720 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
19729 FNfetch2(0,10)
19738 
19747 .fetch3
19756 FNfetch2(3,10)
19765 
19774 .JPC
19783 TST F,#%1
19792 BEQ fetch3
19801 FNgetnext2(1,0)
19810 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
19819 FNfetch2(0,10)
19828 
19837 .JPPO
19846 TST F,#%100
19855 BNE fetch3
19864 FNgetnext2(1,0)
19873 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
19882 FNfetch2(0,10)
19891 
19900 .JPPE
19909 TST F,#%100
19918 BEQ fetch3
19927 FNgetnext2(1,0)
19936 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
19945 FNfetch2(0,10)
19954 
19963 .JPP
19972 TST F,#%10000000
19981 BNE fetch3
19990 FNgetnext2(1,0)
19999 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
20008 FNfetch2(0,10)
20017 
20026 .JPM
20035 TST F,#%10000000
20044 BEQ fetch3
20053 FNgetnext2(1,0)
20062 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
20071 FNfetch2(0,10)
20080 
20089 .JP
20098 FNgetnext2(1,0)
20107 MOV zpc,R1,LSL#16 : ADD zpc,zpc,R0,LSL#24
20116 FNfetch2(0,10)
20125 
20134 .JP_HL
20143 MOV zpc,HL,LSL#16
20152 FNfetch2(0,4)
20161 
20170 .JP_IX
20179 .DD%(&E9)
20188 MOV zpc,IX,LSL#16
20197 FNfetch2(0,8)
20206 
20215 .JP_IY
20224 .FD%(&E9)
20233 MOV zpc,IY,LSL#16
20242 FNfetch2(0,8)
20251 
20260 .callNZ
20269 ADD zpc,zpc,#3 << 16
20278 TST F,#%1000000
20287 BNE fetch0
20296 FNcall
20305 
20314 .callZ
20323 ADD zpc,zpc,#3 << 16
20332 TST F,#%1000000
20341 BEQ fetch0
20350 FNcall
20359 
20368 .callNC
20377 ADD zpc,zpc,#3 << 16
20386 TST F,#%1
20395 BNE fetch0
20404 FNcall
20413 
20422 .callC
20431 ADD zpc,zpc,#3 << 16
20440 TST F,#%1
20449 BEQ fetch0
20458 FNcall
20467 
20476 .fetch0
20485 FNfetch2(0,10)
20494 
20503 .callPO
20512 ADD zpc,zpc,#3 << 16
20521 TST F,#%100
20530 BNE fetch0
20539 FNcall
20548 
20557 .callPE
20566 ADD zpc,zpc,#3 << 16
20575 TST F,#%100
20584 BEQ fetch0
20593 FNcall
20602 
20611 .callP
20620 ADD zpc,zpc,#3 << 16
20629 TST F,#%10000000
20638 BNE fetch0
20647 FNcall
20656 
20665 .callM
20674 ADD zpc,zpc,#3 << 16
20683 TST F,#%10000000
20692 BEQ fetch0
20701 FNcall
20710 
20719 .call
20728 ADD zpc,zpc,#3 << 16
20737 FNcall
20746 
20755 .RETNZ
20764 TST F,#%1000000
20773 BNE fetch1
20782 FNldrb2(zpc,3,zSP)
20791 ADD zSP,zSP,#1 << 16
20800 FNldrb2(1,3,zSP)
20809 ADD zSP,zSP,#1 << 16
20818 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
20827 FNfetch2(0,11)
20836 
20845 .RETZ
20854 TST F,#%1000000
20863 BEQ fetch1
20872 FNldrb2(zpc,3,zSP)
20881 ADD zSP,zSP,#1 << 16
20890 FNldrb2(1,3,zSP)
20899 ADD zSP,zSP,#1 << 16
20908 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
20917 FNfetch2(0,11)
20926 
20935 .RETNC
20944 TST F,#%1
20953 BNE fetch1
20962 FNldrb2(zpc,3,zSP)
20971 ADD zSP,zSP,#1 << 16
20980 FNldrb2(1,3,zSP)
20989 ADD zSP,zSP,#1 << 16
20998 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21007 FNfetch2(0,11)
21016 
21025 .RETC
21034 TST F,#%1
21043 BEQ fetch1
21052 FNldrb2(zpc,3,zSP)
21061 ADD zSP,zSP,#1 << 16
21070 FNldrb2(1,3,zSP)
21079 ADD zSP,zSP,#1 << 16
21088 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21097 FNfetch2(0,11)
21106 
21115 .fetch1
21124 FNfetch2(1,5)
21133 
21142 .RETPO
21151 TST F,#%100
21160 BNE fetch1
21169 FNldrb2(zpc,3,zSP)
21178 ADD zSP,zSP,#1 << 16
21187 FNldrb2(1,3,zSP)
21196 ADD zSP,zSP,#1 << 16
21205 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21214 FNfetch2(0,11)
21223 
21232 .RETPE
21241 TST F,#%100
21250 BEQ fetch1
21259 FNldrb2(zpc,3,zSP)
21268 ADD zSP,zSP,#1 << 16
21277 FNldrb2(1,3,zSP)
21286 ADD zSP,zSP,#1 << 16
21295 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21304 FNfetch2(0,11)
21313 
21322 .RETP
21331 TST F,#%10000000
21340 BNE fetch1
21349 FNldrb2(zpc,3,zSP)
21358 ADD zSP,zSP,#1 << 16
21367 FNldrb2(1,3,zSP)
21376 ADD zSP,zSP,#1 << 16
21385 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21394 FNfetch2(0,11)
21403 
21412 .RETM
21421 TST F,#%10000000
21430 BEQ fetch1
21439 FNldrb2(zpc,3,zSP)
21448 ADD zSP,zSP,#1 << 16
21457 FNldrb2(1,3,zSP)
21466 ADD zSP,zSP,#1 << 16
21475 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21484 FNfetch2(0,11)
21493 
21502 .RET
21511 FNldrb2(zpc,3,zSP)
21520 ADD zSP,zSP,#1 << 16
21529 FNldrb2(1,3,zSP)
21538 ADD zSP,zSP,#1 << 16
21547 ADD zpc,zpc,R1,LSL#8 : MOV zpc,zpc,LSL#16
21556 FNfetch2(0,10)
21565 
21574 
21583 .NEG
21592 MOV R0,A:MOV A,#0:FNsub1(0,2,8)
21601 
21610 .SCF
21619 ORR F,F,#1      ; set C
21628 BIC F,F,#%10010 ; clear H,N
21637 FNfetch2(1,4)
21646 
21655 .CCF
21664 EOR F,F,#%1     ; complement C
21673 BIC F,F,#%10010 ; clear N
21682 TST F,#1:ORRNE F,F,#flagH ; set H=C
21691 FNfetch2(1,4)
21700 
21709 .CPL
21718 EOR A,A,#&FF
21727 ORR F,F,#%10010  ; set H,N
21736 FNfetch2(1,4)
21745 
21754 .RRA
21763 ORR A,A,A,LSL #24
21772 TST F,F,RRX ; Z80 C -> ARM C
21781 MOVS A,A,RRX:MOV A,A,LSR #24
21790 BIC F,F,#flagC+flagN+flagH:ORRCS F,F,#flagC
21799 FNfetch2(1,4)
21808 
21817 .RRCA
21826 ORR A,A,A,LSL #24
21835 MOVS A,A,ROR #1:MOV A,A,LSR #24
21844 BIC F,F,#flagC+flagN+flagH:ORRCS F,F,#flagC
21853 FNfetch2(1,4)
21862 
21871 .RLA
21880 AND R0,F,#1:ORR A,R0,A,LSL #1
21889 TST A,#&100:BIC A,A,#&100
21898 BIC F,F,#flagC+flagN+flagH:ORRNE F,F,#flagC
21907 FNfetch2(1,4)
21916 
21925 .RLCA
21934 MOV R0,A,LSR #7:ORR A,R0,A,LSL #1
21943 TST A,#&100:BIC A,A,#&100
21952 BIC F,F,#flagC+flagN+flagH:ORRNE F,F,#flagC
21961 FNfetch2(1,4)
21970 
21979 .LD_hl_B
21988 MOV R0,BC,LSR#8
21997 FNstr(0,3,HL)
22006 FNfetch2(1,7)
22015 
22024 .LD_hl_D
22033 MOV R0,DE,LSR#8
22042 FNstr(0,3,HL)
22051 FNfetch2(1,7)
22060 
22069 .LD_hl_H
22078 MOV R0,HL,LSR#8
22087 FNstr(0,3,HL)
22096 FNfetch2(1,7)
22105 
22114 .LD_ixd_B
22123 .DD%(&70)
22132 LDRB R1,[R1,#1]
22141 FNaddixiy(1,IX)
22150 MOV R0,BC,LSR#8
22159 FNstr(0,3,1)
22168 FNfetch2(3,19)
22177 
22186 .LD_iyd_B
22195 .FD%(&70)
22204 LDRB R1,[R1,#1]
22213 FNaddixiy(1,IY)
22222 MOV R0,BC,LSR#8
22231 FNstr(0,3,1)
22240 FNfetch2(3,19)
22249 
22258 .LD_ixd_D
22267 .DD%(&72)
22276 LDRB R1,[R1,#1]
22285 FNaddixiy(1,IX)
22294 MOV R0,DE,LSR#8
22303 FNstr(0,3,1)
22312 FNfetch2(3,19)
22321 
22330 .LD_iyd_D
22339 .FD%(&72)
22348 LDRB R1,[R1,#1]
22357 FNaddixiy(1,IY)
22366 MOV R0,DE,LSR#8
22375 FNstr(0,3,1)
22384 FNfetch2(3,19)
22393 
22402 .LD_iyd_H
22411 .FD%(&74)
22420 LDRB R1,[R1,#1]
22429 FNaddixiy(1,IY)
22438 MOV R0,HL,LSR#8
22447 FNstr(0,3,1)
22456 FNfetch2(3,19)
22465 
22474 .LD_ixd_H
22483 .DD%(&74)
22492 LDRB R1,[R1,#1]
22501 FNaddixiy(1,IX)
22510 MOV R0,HL,LSR#8
22519 FNstr(0,3,1)
22528 FNfetch2(3,19)
22537 
22546 .LD_ixd_C
22555 .DD%(&71)
22564 LDRB R1,[R1,#1]
22573 FNaddixiy(1,IX)
22582 FNstr(BC,3,1)
22591 FNfetch2(3,19)
22600 
22609 .LD_iyd_C
22618 .FD%(&71)
22627 LDRB R1,[R1,#1]
22636 FNaddixiy(1,IY)
22645 FNstr(BC,3,1)
22654 FNfetch2(3,19)
22663 
22672 .LD_ixd_E
22681 .DD%(&73)
22690 LDRB R1,[R1,#1]
22699 FNaddixiy(1,IX)
22708 FNstr(DE,3,1)
22717 FNfetch2(3,19)
22726 
22735 .LD_iyd_E
22744 .FD%(&73)
22753 LDRB R1,[R1,#1]
22762 FNaddixiy(1,IY)
22771 FNstr(DE,3,1)
22780 FNfetch2(3,19)
22789 
22798 .LD_ixd_L
22807 .DD%(&75)
22816 LDRB R1,[R1,#1]
22825 FNaddixiy(1,IX)
22834 FNstr(HL,3,1)
22843 FNfetch2(3,19)
22852 
22861 .LD_iyd_L
22870 .FD%(&75)
22879 LDRB R1,[R1,#1]
22888 FNaddixiy(1,IY)
22897 FNstr(HL,3,1)
22906 FNfetch2(3,19)
22915 
22924 .LD_ixd_A
22933 .DD%(&77)
22942 LDRB R1,[R1,#1]
22951 FNaddixiy(1,IX)
22960 FNstr(A,3,1)
22969 FNfetch2(3,19)
22978 
22987 .LD_iyd_A
22996 .FD%(&77)
23005 LDRB R1,[R1,#1]
23014 FNaddixiy(1,IY)
23023 FNstr(A,3,1)
23032 FNfetch2(3,19)
23041 
23050 .LD_hl_C
23059 FNstr(BC,3,HL)
23068 FNfetch2(1,7)
23077 
23086 .LD_hl_E
23095 FNstr(DE,3,HL)
23104 FNfetch2(1,7)
23113 
23122 .LD_hl_L
23131 FNstr(HL,3,HL)
23140 FNfetch2(1,7)
23149 
23158 .LD_hl_A
23167 FNstr(A,3,HL)
23176 FNfetch2(1,7)
23185 
23194 .ADD_HL_BC
23203 FNADD_HL_(BC)
23212 
23221 .ADD_HL_DE
23230 FNADD_HL_(DE)
23239 
23248 .ADD_IX_BC
23257 .DD%(&09)
23266 FNADD_IX_(BC)
23275 
23284 .ADD_IY_BC
23293 .FD%(&09)
23302 FNADD_IY_(BC)
23311 
23320 .ADD_IX_DE
23329 .DD%(&19)
23338 FNADD_IX_(DE)
23347 
23356 .ADD_IY_DE
23365 .FD%(&19)
23374 FNADD_IY_(DE)
23383 
23392 .ADD_HL_SP
23401 MOV R0,zSP,LSR #16
23410 FNADD_HL_(0)
23419 
23428 .ADD_IX_SP
23437 .DD%(&39)
23446 MOV R0,zSP,LSR #16
23455 FNADD_IX_(0)
23464 
23473 .ADD_IY_SP
23482 .FD%(&39)
23491 MOV R0,zSP,LSR #16
23500 FNADD_IY_(0)
23509 
23518 .ADD_HL_HL
23527 ADD HL,HL,HL
23536 BIC F,F,#flagH+flagN+flagC
23545 TST HL,#&1000:ORRNE F,F,#flagH
23554 TST HL,#&10000:ORRNE F,F,#flagC
23563 BIC HL,HL,#&10000
23572 FNfetch2(1,11)
23581 
23590 .ADD_IX_IX
23599 .DD%(&29)
23608 ADD IX,IX,IX
23617 BIC F,F,#flagH+flagN+flagC
23626 TST IX,#&1000:ORRNE F,F,#flagH
23635 TST IX,#&10000:ORRNE F,F,#flagC
23644 BIC IX,IX,#&10000
23653 FNfetch2(2,15)
23662 
23671 .ADD_IY_IY
23680 .FD%(&29)
23689 ADD IY,IY,IY
23698 BIC F,F,#flagH+flagN+flagC
23707 TST IY,#&1000:ORRNE F,F,#flagH
23716 TST IY,#&10000:ORRNE F,F,#flagC
23725 BIC IY,IY,#&10000
23734 FNfetch2(2,15)
23735 
23743 .ADD_A_B
23752 FNadd2(BC,1,4)
23761 
23770 .ADD_A_D
23779 FNadd2(DE,1,4)
23788 
23797 .ADD_A_H
23806 FNadd2(HL,1,4)
23815 
23824 .ADD_A_C
23833 FNadd1(BC,1,4)
23842 
23851 .ADD_A_E
23860 FNadd1(DE,1,4)
23869 
23878 .ADD_A_L
23887 FNadd1(HL,1,4)
23896 
23905 
23914 .ADD_A_A
23923 ]
23932 IF debug%>018 THEN
23941 [OPTp
23950 MOV R1,A,LSL#28 ; MRB 30/1/99
23959 ADD R14,A,A:TST R14,#&100
23968 AND R14,R14,#255:FNzs(14,0):ORRNE F,F,#flagC
23977 ADDS R1,R1,R1:ORRCS F,F,#flagH ; MRB 30/1/99
23986 EOR R1,R14,A:TST R1,#128:ORRNE F,F,#flagV
23995 ; line removed MRB 30/1/99
24004 MOV A,R14
24013 ]
24022 OTHERWISE
24031 [OPTp
24040 MOV R1,A,LSL#28
24049 ADDS R1,R1,R1
24058 FNsetupH
24067 MOV A,A,LSL#24
24076 ADDS A,A,A
24085 MOV A,A,LSR#24
24094 FNsetupCZSVN(0)
24103 ]
24112 ENDIF
24121 [OPTp
24130 FNfetch2(1,4)
24139 
24148 .ADD_A_hl
24157 FNldrb(0,3,HL)
24166 FNadd1(0,1,7)
24175 
24184 .ADD_A_ixd
24193 .DD%(&86)
24202 LDRB R1,[R1,#1]
24211 FNaddixiy(1,IX)
24220 FNldrb(0,3,1)
24229 FNadd1(0,3,19)
24238 
24247 .ADD_A_iyd
24256 .FD%(&86)
24265 LDRB R1,[R1,#1]
24274 FNaddixiy(1,IY)
24283 FNldrb(0,3,1)
24292 FNadd1(0,3,19)
24301 
24310 .ADC_A_B
24319 FNadc2(BC,1,4)
24328 
24337 .ADC_A_D
24346 FNadc2(DE,1,4)
24355 
24364 .ADC_A_H
24373 FNadc2(HL,1,4)
24382 
24391 .ADC_A_C
24400 FNadc1(BC,1,4)
24409 
24418 .ADC_A_E
24427 FNadc1(DE,1,4)
24436 
24445 .ADC_A_L
24454 FNadc1(HL,1,4)
24463 
24472 .ADC_A_A
24481 ]
24490 IF debug%>019 THEN
24499 [OPTp
24508 TST F,F,RRX
24517 ADC R14,A,A:TST R14,#&100
24526 AND R14,R14,#255:FNzs(14,0):ORRNE F,F,#flagC
24535 EOR R1,R14,A:TST R1,#128:ORRNE F,F,#flagV
24544 EOR R1,R1,A:TST R1,#16:ORRNE F,F,#flagH
24553 MOV A,R14
24562 ]
24571 OTHERWISE
24580 [OPTp
24589 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
24598 MVNCS R1,#0
24607 BICCS R1,R1,#&F0000000
24616 MOVCC R1,#0
24625 ADD R1,R1,A,LSL#28
24634 ADCS R1,R1,A,LSL#28
24643 FNsetupH ; MRB 30/1/99 EEK!
24652 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
24661 MOV R1,A,LSL#24
24670 ORRCS R1,R1,#&FF0000
24679 ORRCS R1,R1,#&FF00
24688 ORRCS R1,R1,#&FF
24697 ADCS R1,R1,A,LSL#24
24706 MOV A,R1,LSR#24
24715 FNsetupCZSVN(0)
24724 ]
24733 ENDIF
24742 [OPTp
24751 FNfetch2(1,4)
24760 
24769 .ADC_A_hl
24778 FNldrb(0,3,HL)
24787 FNadc1(0,1,7)
24796 
24805 .ADC_A_ixd
24814 .DD%(&8E)
24823 LDRB R1,[R1,#1]
24832 FNaddixiy(1,IX)
24841 FNldrb(0,3,1)
24850 FNadc1(0,3,19)
24859 
24868 .ADC_A_iyd
24877 .FD%(&8E)
24886 LDRB R1,[R1,#1]
24895 FNaddixiy(1,IY)
24904 FNldrb(0,3,1)
24913 FNadc1(0,3,19)
24922 
24931 .SUB_B
24940 FNsub2(BC,1,4)
24949 
24958 .SUB_D
24967 FNsub2(DE,1,4)
24976 
24985 .SUB_H
24994 FNsub2(HL,1,4)
25003 
25012 .SUB_C
25021 FNsub1(BC,1,4)
25030 
25039 .SUB_E
25048 FNsub1(DE,1,4)
25057 
25066 .SUB_L
25075 FNsub1(HL,1,4)
25084 
25093 .SUB_A
25102 MOV A,#0
25111 .CP_A
25120 BIC F,F,#&FF:ORR F,F,#flagZ+flagN
25129 FNfetch2(1,4)
25138 
25147 .SUB_hl
25156 FNldrb(0,3,HL)
25165 FNsub1(0,1,7)
25174 
25183 .SUB_ixd
25192 .DD%(&96)
25201 LDRB R1,[R1,#1]
25210 FNaddixiy(1,IX)
25219 FNldrb(0,3,1)
25228 FNsub1(0,3,19)
25237 
25246 .SUB_iyd
25255 .FD%(&96)
25264 LDRB R1,[R1,#1]
25273 FNaddixiy(1,IY)
25282 FNldrb(0,3,1)
25291 FNsub1(0,3,19)
25300 
25309 ;.CP_A - see .SUB_A
25318 
25327 .CP_B
25336 FNcp2(BC,1,4)
25345 
25354 .CP_D
25363 FNcp2(DE,1,4)
25372 
25381 .CP_H
25390 FNcp2(HL,1,4)
25399 
25408 .CP_C
25417 FNcp1(BC,1,4)
25426 
25435 .CP_E
25444 FNcp1(DE,1,4)
25453 
25462 .CP_L
25471 FNcp1(HL,1,4)
25480 
25489 .CP_hl
25498 FNldrb(0,3,HL)
25507 FNcp1(0,1,7)
25516 
25525 .CP_ixd
25534 .DD%(&BE)
25543 LDRB R1,[R1,#1]
25552 FNaddixiy(1,IX)
25561 FNldrb(0,3,1)
25570 FNcp1(0,3,19)
25579 
25588 .CP_iyd
25597 .FD%(&BE)
25606 LDRB R1,[R1,#1]
25615 FNaddixiy(1,IY)
25624 FNldrb(0,3,1)
25633 FNcp1(0,3,19)
25642 
25651 .CP_N
25660 FNgetnext(0,0)
25669 FNcp1(0,2,7)
25678 
25687 .SBC_A_A
25696 TST F,#flagC
25705 BIC F,F,#&FF
25714 MOVEQ A,#0:ORREQ F,F,#flagZ+flagN
25723 MOVNE A,#&FF:ORRNE F,F,#flagS+flagH+flagV+flagN+flagC
25732 FNfetch2(1,4)
25741 
25750 .SBC_A_B
25759 FNsbc2(BC,1,4)
25768 
25777 .SBC_A_D
25786 FNsbc2(DE,1,4)
25795 
25804 .SBC_A_H
25813 FNsbc2(HL,1,4)
25822 
25831 .SBC_A_C
25840 FNsbc1(BC,1,4)
25849 
25858 .SBC_A_E
25867 FNsbc1(DE,1,4)
25876 
25885 .SBC_A_L
25894 FNsbc1(HL,1,4)
25903 
25912 .SBC_A_hl
25921 FNldrb(0,3,HL)
25930 FNsbc1(0,1,7)
25939 
25948 .SBC_A_ixd
25957 .DD%(&9E)
25966 LDRB R1,[R1,#1]
25975 FNaddixiy(1,IX)
25984 FNldrb(0,3,1)
25993 FNsbc1(0,3,19)
26002 
26011 .SBC_A_iyd
26020 .FD%(&9E)
26029 LDRB R1,[R1,#1]
26038 FNaddixiy(1,IY)
26047 FNldrb(0,3,1)
26056 FNsbc1(0,3,19)
26065 
26074 .and_B
26083 FNand2(BC,1,4)
26092 
26101 .and_D
26110 FNand2(DE,1,4)
26119 
26128 .and_H
26137 FNand2(HL,1,4)
26146 
26155 .and_C
26164 FNand1(BC,1,4)
26173 
26182 .and_E
26191 FNand1(DE,1,4)
26200 
26209 .and_L
26218 FNand1(HL,1,4)
26227 
26236 .and_A]
26245 IF debug%>020 THEN
26254 [OPTp
26263 FNpzs(A,0):ORR F,F,#flagH:FNfetch2(1,4)
26272 ]
26281 OTHERWISE
26290 [OPTp
26299 FNand1(A,1,4)
26308 ]
26317 ENDIF
26326 [OPTp
26335 
26344 .and_hl
26353 FNldrb(0,3,HL)
26362 FNand1(0,1,7)
26371 
26380 .and_ixd
26389 .DD%(&A6)
26398 LDRB R1,[R1,#1]
26407 FNaddixiy(1,IX)
26416 FNldrb(0,3,1)
26425 FNand1(0,3,19)
26434 
26443 .and_iyd
26452 .FD%(&A6)
26461 LDRB R1,[R1,#1]
26470 FNaddixiy(1,IY)
26479 FNldrb(0,3,1)
26488 FNand1(0,3,19)
26497 
26506 .xor_B
26515 FNxor2(BC,1,4)
26524 
26533 .xor_D
26542 FNxor2(DE,1,4)
26551 
26560 .xor_H
26569 FNxor2(HL,1,4)
26578 
26587 .xor_C
26596 FNxor1(BC,1,4)
26605 
26614 .xor_E
26623 FNxor1(DE,1,4)
26632 
26641 .xor_L
26650 FNxor1(HL,1,4)
26659 
26668 .xor_A
26677 MOV A,#0
26686 BIC F,F,#&FF
26695 ORR F,F,#flagZ+flagP
26704 FNfetch2(1,4)
26713 
26722 .xor_hl
26731 FNldrb(0,3,HL)
26740 FNxor1(0,1,7)
26749 
26758 .xor_ixd
26767 .DD%(&AE)
26776 LDRB R1,[R1,#1]
26785 FNaddixiy(1,IX)
26794 FNldrb(0,3,1)
26803 FNxor1(0,3,19)
26812 
26821 .xor_iyd
26830 .FD%(&AE)
26839 LDRB R1,[R1,#1]
26848 FNaddixiy(1,IY)
26857 FNldrb(0,3,1)
26866 FNxor1(0,3,19)
26875 
26884 .or_A
26893 ]
26902 IF debug%>021 THEN
26911 [OPTp
26920 FNpzs(A,0)
26929 ]
26938 OTHERWISE
26947 [OPTp
26956 MOVS A,A
26965 BIC F,F,#&FF
26974 ORREQ F,F,#flagZ  ; PARITY NOT DONE
26983 ANDS R0,A,#%10101000
26992 ORRNE F,F,R0
27001 EOR R0,A,A,LSR#4
27010 EOR R0,R0,R0,LSL#2
27019 EOR R0,R0,R0,LSR#1
27028 AND R0,R0,#%100
27037 EOR R0,R0,#%100
27046 ADD F,F,R0 ; parity for DARTS180
27055 ]
27064 ENDIF
27073 [OPTp
27082 FNfetch2(1,4)
27091 
27100 .or_B
27109 FNor2(BC,1,4)
27118 
27127 .or_D
27136 FNor2(DE,1,4)
27145 
27154 .or_H
27163 FNor2(HL,1,4)
27172 
27181 .or_C
27190 FNor1(BC,1,4)
27199 
27208 .or_E
27217 FNor1(DE,1,4)
27226 
27235 .or_L
27244 FNor1(HL,1,4)
27253 
27262 .or_hl
27271 FNldrb(0,3,HL)
27280 FNor1(0,1,7)
27289 
27298 .or_ixd
27307 .DD%(&B6)
27316 LDRB R1,[R1,#1]
27325 FNaddixiy(1,IX)
27334 FNldrb(0,3,1)
27343 FNor1(0,3,19)
27352 
27361 .or_iyd
27370 .FD%(&B6)
27379 LDRB R1,[R1,#1]
27388 FNaddixiy(1,IY)
27397 FNldrb(0,3,1)
27406 FNor1(0,3,19)
27415 
27424 .ADD_A_N
27433 FNgetnext(0,0)
27442 FNadd1(0,2,7)
27451 
27460 .SUB_N
27469 FNgetnext(0,0)
27478 FNsub1(0,2,7)
27487 
27496 .ADC_A_N
27505 FNgetnext(0,0)
27514 FNadc1(0,2,7)
27523 
27532 .SBC_A_N
27541 FNgetnext(0,0)
27550 FNsbc1(0,2,7)
27559 
27568 .and_N
27577 FNgetnext(0,0)
27586 FNand1(0,2,7)
27595 
27604 .or_N
27613 FNgetnext(0,0)
27622 FNor1(0,2,7)
27631 
27640 .xor_N
27649 FNgetnext(0,0)
27658 FNxor1(0,2,7)
27667 
27676 .POP_BC
27685 FNpop(BC,1,10)
27694 
27703 .POP_DE
27712 FNpop(DE,1,10)
27721 
27730 .POP_HL
27739 FNpop(HL,1,10)
27748 
27757 .POP_IX
27766 .DD%(&E1)
27775 FNpop(IX,2,14)
27784 
27793 .POP_IY
27802 .FD%(&E1)
27811 FNpop(IY,2,14)
27820 
27829 .POP_AF
27838 FNldrb2(0,3,zSP)
27847 BIC F,F,#&FF : ADD F,F,R0
27856 ADD zSP,zSP,#1 << 16
27865 FNldrb2(A,3,zSP)
27874 ADD zSP,zSP,#1 << 16
27883 FNfetch2(1,10)
27892 
27901 .PUSH_BC
27910 FNpush(BC,1,11)
27919 
27928 .PUSH_DE
27937 FNpush(DE,1,11)
27946 
27955 .PUSH_HL
27964 FNpush(HL,1,11)
27973 
27982 .PUSH_IX
27991 .DD%(&E5)
28000 FNpush(IX,2,15)
28009 
28018 .PUSH_IY
28027 .FD%(&E5)
28036 FNpush(IY,2,15)
28045 
28054 .PUSH_AF
28063 SUB zSP,zSP,#1 << 16
28072 FNstr2(A,3,zSP)
28081 SUB zSP,zSP,#1 << 16
28090 FNstr2(F,3,zSP)
28099 FNfetch2(1,11)
28108 
28117 .RST_00
28126 FNrst(&00)
28135 
28144 .RST_08
28153 FNrst(&08)
28162 
28171 .RST_10
28180 FNrst(&10)
28189 
28198 .RST_18
28207 FNrst(&18)
28216 
28225 .RST_20
28234 FNrst(&20)
28243 
28252 .RST_28
28261 FNrst(&28)
28270 
28279 .RST_30
28288 FNrst(&30)
28297 
28306 .RST_38
28315 FNrst(&38)
28324 
28333 .EX_sp_HL
28342 FNldrb2(0,3,zSP)
28351 ADD HL,HL,R0,LSL#16
28360 FNstr2(HL,3,zSP)
28369 MOV HL,HL,LSR#8
28378 ADD R1,zSP,#1<<16 : FNldrb2(0,3,1)
28387 ADD HL,HL,R0,LSL#16
28396 FNstr2(HL,3,1)
28405 MOV HL,HL,LSR#8
28414 FNfetch2(1,19)
28423 
28432 .EX_sp_IX
28441 .DD%(&E3)
28450 FNldrb2(0,3,zSP)
28459 ADD IX,IX,R0,LSL#16
28468 FNstr2(IX,3,zSP)
28477 MOV IX,IX,LSR#8
28486 ADD R1,zSP,#1<<16 : FNldrb2(0,3,1)
28495 ADD IX,IX,R0,LSL#16
28504 FNstr2(IX,3,1)
28513 MOV IX,IX,LSR#8
28522 FNfetch2(2,23)
28531 
28540 .EX_sp_IY
28549 .FD%(&E3)
28558 FNldrb2(0,3,zSP)
28567 ADD IY,IY,R0,LSL#16
28576 FNstr2(IY,3,zSP)
28585 MOV IY,IY,LSR#8
28594 ADD R1,zSP,#1<<16 : FNldrb2(0,3,1)
28603 ADD IY,IY,R0,LSL#16
28612 FNstr2(IY,3,1)
28621 MOV IY,IY,LSR#8
28630 FNfetch2(2,23)
28639 
28648 .EX_DE_HL
28657 EOR DE,DE,HL
28666 EOR HL,HL,DE
28675 EOR DE,DE,HL
28684 FNfetch2(1,4)
28693 
28702 .LD_SP_HL
28711 FNandFFFF(zSP)
28720 ADD zSP,zSP,HL,LSL#16
28729 FNfetch2(1,6)
28738 
28747 .LD_SP_IX
28756 .DD%(&F9)
28765 FNandFFFF(zSP)
28774 ADD zSP,zSP,IX,LSL#16
28783 FNfetch2(2,10)
28792 
28801 .LD_SP_IY
28810 .FD%(&F9)
28819 FNandFFFF(zSP)
28828 ADD zSP,zSP,IY,LSL#16
28837 FNfetch2(2,10)
28846 
28855 .LD_A_I
28864 ]
28873 IF debug%>022 THEN
28882 [OPTp
28891 MOV A,RI,LSR #1:AND A,A,#&FF:FNzs_c(A,0)
28900 TST F,#%10000000000 ; IFF2
28909 ORRNE F,F,#flagP
28918 ]
28927 OTHERWISE
28936 [OPTp
28945 MOV A,RI,LSR#1
28954 MOVS A,A,LSL#24
28963 MOV A,A,LSR#24
28972 BIC F,F,#%11101100
28981 FNsetupSZ
28990 AND R0,F,#%10000000000 ; IFF2
28999 ORR F,F,R0,LSR#8
29008 
29017 ]
29026 ENDIF
29035 [OPTp
29044 FNfetch2(2,9)
29053 
29062 .LD_I_A
29071 BIC RI,RI,#%111111100
29080 BIC RI,RI,#%000000010
29089 ORR RI,RI,A,LSL #1
29098 FNfetch2(2,9)
29107 
29116 .LD_R_A
29125 BIC RI,RI,#1
29134 BIC RI,RI,#%1111111<<25
29143 ORR RI,RI,A,ROR #7
29152 FNfetch2(2,9)
29161 
29170 .LD_A_R
29179 ]
29188 IF debug%>023 THEN
29197 [OPTp
29206 MOV A,RI,ROR #25:AND A,A,#&FF:FNzs_c(A,0)
29215 TST F,#%10000000000 ; IFF2
29224 ORRNE F,F,#flagP
29233 ]
29242 OTHERWISE
29251 [OPTp
29260 BIC A,RI,#%111111100
29269 BIC A,A,#%000000010
29278 MOVS A,A,ROR#1
29287 MOV A,A,LSR#24
29296 BIC F,F,#%11101100
29305 ORREQ F,F,#%1000000
29314 ANDS R0,A,#%10101000
29323 ADDNE F,F,R0
29332 ;FNsetupSZ
29341 AND R0,F,#%10000000000 ; IFF2
29350 ORR F,F,R0,LSR#8
29359 ]
29368 ENDIF
29377 [OPTp
29386 FNfetch2(2,9)
29395 
29404 .LD_BC_nn
29413 LDRB R0,[R1,#1]!
29422 LDRB R1,[R1,#1]
29431 ADD R0,R0,R1,LSL#8
29440 ;LDRB BC,[R3,R0]
29449 FNldrb(BC,3,0)
29458 ADD R0,R0,#1
29467 ;LDRB R0,[R3,R0]
29476 FNldrb(0,3,0)
29485 ADD BC,BC,R0,LSL#8
29494 FNfetch2(4,10)
29503 
29512 .LD_DE_nn
29521 LDRB R0,[R1,#1]!
29530 LDRB R1,[R1,#1]
29539 ADD R0,R0,R1,LSL#8
29548 ;LDRB DE,[R3,R0]
29557 FNldrb(DE,3,0)
29566 ADD R0,R0,#1
29575 ;LDRB R0,[R3,R0]
29584 FNldrb(0,3,0)
29593 ADD DE,DE,R0,LSL#8
29602 FNfetch2(4,10)
29611 
29620 .LD_HL_nn2
29629 LDRB R0,[R1,#1]!
29638 LDRB R1,[R1,#1]
29647 ADD R0,R0,R1,LSL#8
29656 ;LDRB HL,[R3,R0]
29665 FNldrb(HL,3,0)
29674 ADD R0,R0,#1
29683 ;LDRB R0,[R3,R0]
29692 FNldrb(0,3,0)
29701 ADD HL,HL,R0,LSL#8
29710 FNfetch2(4,10)
29719 
29728 .LD_SP_nn
29737 ;;FNprints("LD_SP_nn")
29746 LDRB R0,[R1,#1]!
29755 LDRB R1,[R1,#1]
29764 ADD R0,R0,R1,LSL#8
29773 ;LDRB R1,[R3,R0]
29782 FNldrb(1,3,0)
29791 ADD R0,R0,#1
29800 ;LDRB R0,[R3,R0]
29809 FNldrb(0,3,0)
29818 FNandFFFF(zSP)
29827 ADD zSP,zSP,R1,LSL#16
29836 ADD zSP,zSP,R0,LSL#24
29845 FNfetch2(4,10)
29854 
29863 .LD_nn_BC
29872 LDRB R0,[R1,#1]!
29881 LDRB R1,[R1,#1]
29890 ADD R0,R0,R1,LSL#8
29899 ;FNwp(0)
29908 ;STRHSB BC,[R3,R0]
29917 FNstr(BC,3,0)
29926 ADD R0,R0,#1
29935 MOV R1,BC,LSR#8
29944 ;FNwp(0)
29953 ;STRHSB R1,[R3,R0]
29962 FNstr(1,3,0)
29971 FNfetch2(4,20)
29980 
29989 .LD_nn_DE
29998 LDRB R0,[R1,#1]!
30007 LDRB R1,[R1,#1]
30016 ADD R0,R0,R1,LSL#8
30025 ;FNwp(0)
30034 ;STRHSB DE,[R3,R0]
30043 FNstr(DE,3,0)
30052 ADD R0,R0,#1
30061 MOV R1,DE,LSR#8
30070 ;FNwp(0)
30079 ;STRHSB R1,[R3,R0]
30088 FNstr(1,3,0)
30097 FNfetch2(4,20)
30106 
30115 .LD_nn_HL2
30124 LDRB R0,[R1,#1]!
30133 LDRB R1,[R1,#1]
30142 ADD R0,R0,R1,LSL#8
30151 ;FNwp(0)
30160 ;STRHSB HL,[R3,R0]
30169 FNstr(HL,3,0)
30178 ADD R0,R0,#1
30187 MOV R1,HL,LSR#8
30196 ;FNwp(0)
30205 ;STRHSB R1,[R3,R0]
30214 FNstr(1,3,0)
30223 FNfetch2(4,20)
30232 
30241 .LD_nn_SP
30250 LDRB R0,[R1,#1]!
30259 LDRB R1,[R1,#1]
30268 ADD R0,R0,R1,LSL#8
30277 MOV R1,zSP,LSR#16
30286 ;FNwp(0)
30295 ;STRHSB R1,[R3,R0]
30304 FNstr(1,3,0)
30313 ADD R0,R0,#1
30322 MOV R1,zSP,LSR#24
30331 ;FNwp(0)
30340 ;STRHSB R1,[R3,R0]
30349 FNstr(1,3,0)
30358 FNfetch2(4,20)
30367 
30376 .ADC_HL_BC
30385 FNADC_HL_(BC)
30394 
30403 .ADC_HL_DE
30412 FNADC_HL_(DE)
30421 
30430 .ADC_HL_SP
30439 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
30448 ADDCS R0,zSP,#1 << 16 : MOVCC R0,zSP
30457 ]
30466 IF emuH THEN
30475 [OPTp
30484 MOV R1,R0,LSL#4
30493 ADDS R1,R1,HL,LSL#20
30502 FNsetupH
30511 ]
30520 ENDIF
30529 [OPTp
30538 ADDS HL,R0,HL,LSL#16
30547 FNsetupCZSVN(0)
30556 MOV HL,HL,LSR#16
30565 FNfetch2(2,15)
30574 
30583 .ADC_HL_HL
30592 AND R0,F,#1
30601 ADD R0,R0,HL
30610 CMP R0,#&10000 : BEQ ADC_HL_HL_FFFF
30619 MOV R0,R0,LSL#16
30628 ]
30637 IF emuH THEN
30646 [OPTp
30655 MOV R1,R0,LSL#4
30664 ADDS R1,R1,HL,LSL#20
30673 FNsetupH
30682 ]
30691 ENDIF
30700 [OPTp
30709 ADDS HL,R0,HL,LSL#16
30718 FNsetupCZSVN(0)
30727 MOV HL,HL,LSR#16
30736 FNfetch2(2,15)
30745 
30754 .ADC_HL_HL_FFFF ; H=FFFF
30763 BIC F,F,#%01000110
30772 ORR F,F,#%10111001
30781 FNfetch2(2,15)
30790 
30799 .SBC_HL_BC
30808 FNSBC_HL_(BC)
30817 
30826 .SBC_HL_DE
30835 FNSBC_HL_(DE)
30844 
30853 .SBC_HL_HL
30862 ;FNSBC_HL_(HL)
30863 MOV HL,#0
30864 BIC F,F,#255:ORR F,F,#flagN
30871 TST F,#%1
30884 ORRNE F,F,#flagZ
30885 ORREQ F,F,#flagS+flagH+flag3+flag5+flagV+flagC
30886 SUBEQ HL,HL,#1
30887 MOVEQ HL,HL,LSR#16
30889 
30898 FNfetch2(2,15)
30907 
30916 
30925 .SBC_HL_SP
30934 MOV R1,zSP,LSR#16
30943 ]
30952 IF emuH THEN
30961 [OPTp
30970 EOR R0,F,#1
30979 MOVS R0,R0,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
30988 MOV R0,R1,LSL#20
30997 SBCS R0,R0,HL,LSL#20
31006 FNrev_setupH
31015 ]
31024 ENDIF
31033 [OPTp
31042 EOR R0,F,#1
31051 MOVS R0,R0,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
31060 MOV HL,HL,LSL#16
31069 SBCS HL,HL,R1,LSL#16
31078 FNrev_setupCZSVN(1)
31087 MOVS HL,HL,LSR#16
31096 FNsetupZ
31105 
31114 FNfetch2(2,15)
31123 
31132 .DI
31141 ;SWI &100+ASC"D"
31150 BIC F,F,#%110000000000
31159 FNfetch2(1,4)
31168 
31177 .EI
31186 ;SWI &100+ASC"E"
31195 ORR F,F,#%110000000000
31204 FNfetch2(1,4)
31213 
31222 .IM0
31231 ;SWI &100+ASC"0"
31240 BIC F,F,#%1100000000
31249 FNfetch2(2,8)
31258 
31267 .IM1
31276 ;SWI &100+ASC"1"
31285 BIC F,F,#%1100000000
31294 ORR F,F,#%0100000000
31303 FNfetch2(2,8)
31312 
31321 .IM2
31330 ;SWI &100+ASC"2"
31339 ORR F,F,#%1100000000
31348 FNfetch2(2,8)
31357 
31366 
31375 .DAA
31384 AND R0,F,#%10011
31393 CMP R0,#%00000 : BEQ DAA_000
31402 CMP R0,#%10000 : BEQ DAA_100
31411 CMP R0,#%00010 : BEQ DAA_010
31420 CMP R0,#%00001 : BEQ DAA_001
31429 CMP R0,#%00011 : BEQ DAA_011
31438 CMP R0,#%10010 : BEQ DAA_110
31447 CMP R0,#%10001 : BEQ DAA_101
31456 ; B DAA_111
31465 
31474 .DAA_111
31483 ADD A,A,#&9A
31492 ORR F,F,#%1
31501 FNdaa
31510 
31519 .DAA_101
31528 ADD A,A,#&66
31537 ORR F,F,#%1
31546 FNdaa
31555 
31564 .DAA_110
31573 ADD A,A,#&FA
31582 BIC F,F,#%1
31591 FNdaa
31600 
31609 .DAA_000
31618 AND R0,A,#&F
31627 CMP R0,#9
31636 BLE DAA_000_L
31645 MOV R0,A,LSR#4
31654 CMP R0,#8
31663 ADDLE A,A,#&06
31672 BICLE F,F,#%1
31681 ADDGT A,A,#&66
31690 ORRGT F,F,#%1
31699 FNdaa
31708 
31717 .DAA_000_L
31726 ;SWI &100+ASC"Q"
31735 MOV R0,A,LSR#4
31744 CMP R0,#9
31753 ADDGT A,A,#&60
31762 ORRGT F,F,#%1
31771 BICLE F,F,#%1
31780 FNdaa
31789 
31798 .DAA_001
31807 AND R1,A,#%1111 : CMP R1,#9
31816 ADDLE A,A,#&60
31825 ADDGT A,A,#&66
31834 ORR F,F,#%1
31843 FNdaa
31852 
31861 .DAA_010
31870 BIC F,F,#%1
31879 FNdaa
31888 
31897 .DAA_011
31906 ADD A,A,#&A0
31915 ORR F,F,#%1
31924 FNdaa
31933 
31942 .DAA_100
31951 CMP A,#&9F
31960 ADDLE A,A,#&06
31969 BICLE F,F,#%1
31978 ADDGT A,A,#&66
31987 ORRGT F,F,#%1
31996 FNdaa
32005 
32014 .RRD
32023 ;LDRB R0,[R3,HL]
32032 FNldrb(0,3,HL)
32041 AND R1,R0,#%1111
32050 ADD R0,R0,A,LSL#8
32059 MOV R0,R0,LSR#4
32068 ;FNwp(HL)
32077 ;STRHSB R0,[R3,HL]
32086 FNstr(0,3,HL)
32095 AND A,A,#%11110000
32104 ADD A,A,R1
32113 MOVS R0,A,LSL#24
32122 BIC F,F,#%11111110
32131 FNsetupSZ
32140 FNfetch2(2,18)
32149 
32158 .RLD
32167 ;LDRB R0,[R3,HL]
32176 FNldrb(0,3,HL)
32185 AND R1,A,#%1111
32194 ADD R0,R1,R0,LSL#4
32203 ;FNwp(HL)
32212 ;STRHSB R0,[R3,HL]
32221 FNstr(0,3,HL)
32230 AND A,A,#%11110000
32239 ADD A,A,R0,LSR#8
32248 MOVS R0,A,LSL#24
32257 BIC F,F,#%11111110
32266 FNsetupSZ
32275 FNfetch2(2,18)
32284 
32293 .LDI
32302 ;FNprints("LDI")
32311 ;SUB R13,R13,BC,LSL#7 ; quick hack
32320 ;LDRB R0,[R3,HL]
32329 FNldrb(0,3,HL)
32338 ;FNwp(DE)
32347 ;STRHSB R0,[R3,DE]
32356 FNstr(0,3,DE)
32365 ADD DE,DE,#1
32374 ADD HL,HL,#1
32383 BIC DE,DE,#1 << 16
32392 BIC HL,HL,#1 << 16
32401 CMP BC,#0
32410 MOVEQ BC,#&10000
32419 SUBS BC,BC,#1
32428 BIC F,F,#%10110
32437 ORRNE F,F,#%100
32446 FNfetch2(2,1)
32455 
32464 .LDIR
32473 ;FNprints("LDIR")
32482 ;SUB R13,R13,BC,LSL#7 ; quick hack
32491 ;LDRB R0,[R3,HL]
32500 FNldrb(0,3,HL)
32509 ;FNwp(DE)
32518 ;STRHSB R0,[R3,DE]
32527 FNstr(0,3,DE)
32536 ADD DE,DE,#1
32545 ADD HL,HL,#1
32554 BIC DE,DE,#1 << 16
32563 BIC HL,HL,#1 << 16
32572 CMP BC,#0
32581 MOVEQ BC,#&10000
32590 ;;;;;ADDEQ R13,R13,#5 ; adjust to 16 T states
32599 SUBS BC,BC,#1
32608 BIC F,F,#%10110
32617 ORRNE F,F,#%100
32626 ADDEQ R13,R13,#5 ; adjust to 16 T states
32635 ADDEQ zpc,zpc,#2 << 16
32644 FNfetch2(0,21)
32653 
32662 
32671 ;.LDIR
32680 ;FNprints("LDIR")
32689 ;SUB R13,R13,BC,LSL#4 ; quick hack
32698 ;CMP BC,#0
32707 ;MOVEQ BC,#&10000
32716 ;.LDIRloop
32725 ;LDRB R0,[R3,HL]
32734 ;STRB R0,[R3,DE]
32743 ;ADD DE,DE,#1
32752 ;ADD HL,HL,#1
32761 ;BIC DE,DE,#1 << 16
32770 ;BIC HL,HL,#1 << 16
32779 ;SUBS BC,BC,#1
32788 ;BNE LDIRloop
32797 ;BIC F,F,#%10110
32806 ;FNfetch2(2,1) ; NOT RIGHT
32815 
32824 .LDD
32833 ;FNprints("LDD")
32842 ;FNprint(zpc)
32851 CMP BC,#0
32860 MOVEQ BC,#&10000
32869 ;LDRB R0,[R3,HL]
32878 FNldrb(0,3,HL)
32887 ;FNwp(DE)
32896 ;STRHSB R0,[R3,DE]
32905 FNstr(0,3,DE)
32914 CMP DE,#0 : MOVEQ DE,#&10000
32923 CMP HL,#0 : MOVEQ HL,#&10000
32932 SUB DE,DE,#1
32941 SUB HL,HL,#1
32950 SUBS BC,BC,#1
32959 BIC F,F,#%10110
32968 ORRNE F,F,#%100
32977 FNfetch2(2,16)
32986 
32995 .LDDR
33004 ;FNprints("LDD")
33013 ;FNprint(zpc)
33022 CMP BC,#0
33031 MOVEQ BC,#&10000
33040 ;LDRB R0,[R3,HL]
33049 FNldrb(0,3,HL)
33058 ;FNwp(DE)
33067 ;STRHSB R0,[R3,DE]
33076 FNstr(0,3,DE)
33085 CMP DE,#0 : MOVEQ DE,#&10000
33094 CMP HL,#0 : MOVEQ HL,#&10000
33103 SUB DE,DE,#1
33112 SUB HL,HL,#1
33121 SUBS BC,BC,#1
33130 BIC F,F,#%10110
33139 ORRNE F,F,#%100
33148 ADDEQ R13,R13,#5 ; adjust to 16 T states
33157 ADDEQ zpc,zpc,#2<<16
33166 FNfetch2(0,21)
33175 
33184 ;.LDDR
33193 ;FNprints("LDDR")
33202 ;FNprintCR(zpc)
33211 
33220 ;CMP BC,#0
33229 ;MOVEQ BC,#&10000
33238 ;.LDDRloop
33247 ;LDRB R0,[R3,HL]
33256 ;;;;;FNwp(DE)
33265 ;;;;;STRHSB R0,[R3,DE]
33274 ;CMP DE,#0 : ;MOVEQ DE,#&10000
33283 ;CMP HL,#0 : ;MOVEQ HL,#&10000
33292 ;SUB DE,DE,#1
33301 ;SUB HL,HL,#1
33310 ;SUBS BC,BC,#1
33319 ;BNE LDDRloop
33328 ;BIC F,F,#%10110
33337 ;FNfetch2(2,16) ; NOT RIGHT
33346 
33355 .CPI
33364 ;FNprints("CPI")
33373 ;LDRB R0,[R3,HL]
33382 FNldrb(0,3,HL)
33391 MOV R1,R0,LSL#28
33400 SUBS R1,R1,A,LSL#28
33409 FNrev_setupH
33418 MOV R1,R0,LSL#24
33427 SUBS R1,R1,A,LSL#24
33436 BIC F,F,#%11000110
33445 FNsetupSZ
33454 ADD HL,HL,#1 : BIC HL,HL,#&10000
33463 CMP BC,#0 : MOVEQ BC,#&10000 : SUBS BC,BC,#1
33472 ORRNE F,F,#%110
33481 ORREQ F,F,#%10
33490 FNfetch2(2,16)
33499 
33508 .CPIR
33517 ;FNprints("CPIR")
33526 ;LDRB R0,[R3,HL]
33535 FNldrb(0,3,HL)
33544 ADD HL,HL,#1 : BIC HL,HL,#&10000
33553 CMP BC,#0 : MOVEQ BC,#&10000 : SUBS BC,BC,#1
33562 BEQ CPIR_E1
33571 CMP R0,A
33580 BEQ CPIR_E2
33589 FNfetch2(0,21)
33598 
33607 .CPIR_E1 ; BC=0
33616 MOV R1,R0,LSL#28
33625 SUBS R1,R1,A,LSL#28
33634 FNrev_setupH
33643 MOV R1,R0,LSL#24
33652 SUBS R1,R1,A,LSL#24
33661 BIC F,F,#%11000110
33670 FNsetupSZ
33679 ORR F,F,#%10
33688 FNfetch2(2,16)
33697 
33706 .CPIR_E2 ; R0=(HL)
33715 BIC F,F,#%11111111
33724 ORR F,F,#%01000110
33733 FNfetch2(2,16)
33742 
33751 ;.CPIR
33760 ;FNprints("CPIR")
33769 ;LDRB R0,[R3,HL]
33778 ;FNldrb(0,3,HL)
33787 ;MOV R1,R0,LSL#28
33796 ;SUBS R1,R1,A,LSL#28
33805 ;FNsetupH
33814 ;MOV R1,R0,LSL#24
33823 ;SUBS R1,R1,A,LSL#24
33832 ;BIC F,F,#%11000110
33841 ;FNsetupSZ
33850 ;BEQ CPIRfetch1
33859 ;ADD HL,HL,#1 : ;BIC HL,HL,#&10000
33868 ;CMP BC,#0 : ;MOVEQ BC,#&10000 : ;SUBS BC,BC,#1
33877 ;BEQ CPIRfetch0
33886 ;FNfetch2(0,21)
33895 
33904 ;.CPIRfetch0
33913 ;ORR F,F,#%10
33922 ;FNfetch2(2,16)
33931 
33940 ;.CPIRfetch1
33949 ;ADD HL,HL,#1 : ;BIC HL,HL,#&10000
33958 ;CMP BC,#0 : ;MOVEQ BC,#&10000 : ;SUBS BC,BC,#1
33967 ;ORRNE F,F,#%110 : ;ORREQ F,F,#%10
33976 ;FNfetch2(2,16)
33985 
33994 .CPD
34003 ;FNprints("CPD")
34012 ;LDRB R0,[R3,HL]
34021 FNldrb(0,3,HL)
34030 MOV R1,R0,LSL#28
34039 SUBS R1,R1,A,LSL#28
34048 FNsetupH
34057 MOV R1,R0,LSL#24
34066 SUBS R1,R1,A,LSL#24
34075 BIC F,F,#%11000110
34084 FNsetupSZ
34093 CMP HL,#0 : MOVEQ HL,#&10000
34102 SUB HL,HL,#1
34111 CMP BC,#0 : MOVEQ BC,#&10000
34120 SUBS BC,BC,#1
34129 ORRNE F,F,#%110 : ORREQ F,F,#%10
34138 FNfetch2(2,16)
34147 
34156 .CPDR
34165 ;FNprints("CPDR")
34174 ;LDRB R0,[R3,HL]
34183 FNldrb(0,3,HL)
34192 MOV R1,R0,LSL#28
34201 SUBS R1,R1,A,LSL#28
34210 FNsetupH
34219 MOV R1,R0,LSL#24
34228 SUBS R1,R1,A,LSL#24
34237 BIC F,F,#%11000110
34246 FNsetupSZ
34255 BEQ CPDRfetch1
34264 CMP HL,#0 : MOVEQ HL,#&10000
34273 SUB HL,HL,#1
34282 CMP BC,#0 : MOVEQ BC,#&10000
34291 SUBS BC,BC,#1
34300 BEQ CPDRfetch0
34309 FNfetch2(0,21)
34318 
34327 .CPDRfetch0
34336 ORR F,F,#%10
34345 FNfetch2(2,16)
34354 
34363 .CPDRfetch1
34372 CMP HL,#0 : MOVEQ HL,#&10000 : SUB HL,HL,#1
34381 CMP BC,#0 : MOVEQ BC,#&10000 : SUBS BC,BC,#1
34390 ORRNE F,F,#%110 : ORREQ F,F,#%10
34399 FNfetch2(2,16)
34408 
34417 
34426 ;SWI &107
34435 ;FNprint(zpc)
34444 ;FNfetch2(2)
34453 
34462 ; undocumented opcodes
34471 .undoc_DD
34480 .undoc_FD
34489 FNfetch2(1,4)
34498 
34507 .undoc_ED ; should all be NOPs now
34516 FNfetch2(2,0)
34525 
34534 .INC_IXh
34543 .DD%(&24)
34552 FNinc2(IX,2)
34561 
34570 .INC_IYh
34579 .FD%(&24)
34588 FNinc2(IY,2)
34597 
34606 .DEC_IXh
34615 .DD%(&25)
34624 FNdec2(IX,2,8)
34633 
34642 .DEC_IYh
34651 .FD%(&25)
34660 FNdec2(IY,2,8)
34669 
34678 .LD_IXh_N
34687 .DD%(&26)
34696 LDRB R0,[R1,#1]
34705 AND IX,IX,#&FF
34714 ADD IX,IX,R0,LSL#8
34723 FNfetch2(3,8)
34732 
34741 .LD_IYh_N
34750 .FD%(&26)
34759 LDRB R0,[R1,#1]
34768 AND IY,IY,#&FF
34777 ADD IY,IY,R0,LSL#8
34786 FNfetch2(3,8)
34795 
34804 .DEC_IX
34813 .DD%(&2B)
34822 SUB IX,IX,#1
34831 FNandFFFF(IX)
34840 FNfetch2(2,10)
34849 
34858 .DEC_IY
34867 .FD%(&2B)
34876 SUB IY,IY,#1
34885 FNandFFFF(IX)
34894 FNfetch2(2,10)
34903 
34912 .INC_IXl
34921 .DD%(&2C)
34930 FNinc1(IX,2)
34939 
34948 .INC_IYl
34957 .FD%(&2C)
34966 FNinc1(IY,2)
34975 
34984 .DEC_IXl
34993 .DD%(&2D)
35002 FNdec1(IX,2,8)
35011 
35020 .DEC_IYl
35029 .FD%(&2D)
35038 FNdec1(IY,2,8)
35047 
35056 .LD_IXl_N
35065 .DD%(&2E)
35074 LDRB R0,[R1,#1]
35083 AND IX,IX,#&FF00
35092 ADD IX,IX,R0
35101 FNfetch2(3,8)
35110 
35119 .LD_IYl_N
35128 .FD%(&2E)
35137 LDRB R0,[R1,#1]
35146 AND IY,IY,#&FF00
35155 ADD IY,IY,R0
35164 FNfetch2(3,8)
35173 
35182 .LD_B_IXh
35191 .DD%(&44)
35200 BIC BC,BC,#&FF00
35209 AND R0,IX,#&FF00
35218 ADD BC,BC,R0
35227 FNfetch2(2,8)
35236 
35245 .LD_B_IYh
35254 .FD%(&44)
35263 BIC BC,BC,#&FF00
35272 AND R0,IY,#&FF00
35281 ADD BC,BC,R0
35290 FNfetch2(2,8)
35299 
35308 .LD_B_IXl
35317 .DD%(&45)
35326 BIC BC,BC,#&FF00
35335 AND R0,IX,#&FF
35344 ADD BC,BC,R0,LSL#8
35353 FNfetch2(2,8)
35362 
35371 .LD_B_IYl
35380 .FD%(&45)
35389 BIC BC,BC,#&FF00
35398 AND R0,IY,#&FF
35407 ADD BC,BC,R0,LSL#8
35416 FNfetch2(2,8)
35425 
35434 .DD%(&4C)
35443 .LD_C_IXh
35452 BIC BC,BC,#&FF
35461 ADD BC,BC,IX,LSR#8
35470 FNfetch2(2,8)
35479 
35488 .FD%(&4C)
35497 .LD_C_IYh
35506 BIC BC,BC,#&FF
35515 ADD BC,BC,IY,LSR#8
35524 FNfetch2(2,8)
35533 
35542 .LD_C_IXl
35551 .DD%(&4D)
35560 BIC BC,BC,#&FF
35569 AND R0,IX,#&FF
35578 ADD BC,BC,R0
35587 FNfetch2(2,8)
35596 
35605 .LD_C_IYl
35614 .FD%(&4D)
35623 BIC BC,BC,#&FF
35632 AND R0,IY,#&FF
35641 ADD BC,BC,R0
35650 FNfetch2(2,8)
35659 
35668 .DD%(&54)
35677 .LD_D_IXh
35686 AND R0,IX,#&FF00
35695 BIC DE,DE,#&FF00
35704 ADD DE,DE,R0
35713 FNfetch2(2,8)
35722 
35731 .FD%(&54)
35740 .LD_D_IYh
35749 AND R0,IY,#&FF00
35758 BIC DE,DE,#&FF00
35767 ADD DE,DE,R0
35776 FNfetch2(2,8)
35785 
35794 .DD%(&55)
35803 .LD_D_IXl
35812 BIC DE,DE,#&FF00
35821 AND R0,IX,#&FF
35830 ADD DE,DE,R0,LSL#8
35839 FNfetch2(2,8)
35848 
35857 .FD%(&55)
35866 .LD_D_IYl
35875 BIC DE,DE,#&FF00
35884 AND R0,IY,#&FF
35893 ADD DE,DE,R0,LSL#8
35902 FNfetch2(2,8)
35911 
35920 .DD%(&5C)
35929 .LD_E_IXh
35938 BIC DE,DE,#&FF
35947 ADD DE,DE,IX,LSR#8
35956 FNfetch2(2,8)
35965 
35974 .FD%(&5C)
35983 .LD_E_IYh
35992 BIC DE,DE,#&FF
36001 ADD DE,DE,IY,LSR#8
36010 FNfetch2(2,8)
36019 
36028 .DD%(&5D)
36037 .LD_E_IXl
36046 AND R0,IX,#&FF
36055 BIC DE,DE,#&FF
36064 ADD DE,DE,R0
36073 FNfetch2(2,8)
36082 
36091 .FD%(&5D)
36100 .LD_E_IYl
36109 AND R0,IY,#&FF
36118 BIC DE,DE,#&FF
36127 ADD DE,DE,R0
36136 FNfetch2(2,8)
36145 
36154 .DD%(&60)
36163 .LD_IXh_B
36172 BIC IX,IX,#&FF00
36181 AND R0,BC,#&FF00
36190 ADD IX,IX,R0
36199 FNfetch2(2,8)
36208 
36217 .FD%(&60)
36226 .LD_IYh_B
36235 BIC IY,IY,#&FF00
36244 AND R0,BC,#&FF00
36253 ADD IY,IY,R0
36262 FNfetch2(2,8)
36271 
36280 .DD%(&61)
36289 .LD_IXh_C
36298 BIC IX,IX,#&FF00
36307 AND R0,BC,#&FF
36316 ADD IX,IX,R0,LSL#8
36325 FNfetch2(2,8)
36334 
36343 .FD%(&61)
36352 .LD_IYh_C
36361 BIC IY,IY,#&FF00
36370 AND R0,BC,#&FF
36379 ADD IY,IY,R0,LSL#8
36388 FNfetch2(2,8)
36397 
36406 .LD_IXh_D
36415 .DD%(&62)
36424 AND R0,DE,#&FF00
36433 AND IX,IX,#&FF
36442 ADD IX,IX,R0
36451 FNfetch2(2,8)
36460 
36469 .LD_IYh_D
36478 .FD%(&62)
36487 AND R0,DE,#&FF00
36496 AND IY,IY,#&FF
36505 ADD IY,IY,R0
36514 FNfetch2(2,8)
36523 
36532 .LD_IXh_E
36541 .DD%(&63)
36550 BIC IX,IX,#&FF00
36559 AND R0,DE,#&FF
36568 ADD IX,IX,R0,LSL#8
36577 FNfetch2(2,8)
36586 
36595 .LD_IYh_E
36604 .FD%(&63)
36613 BIC IY,IY,#&FF00
36622 AND R0,DE,#&FF
36631 ADD IY,IY,R0,LSL#8
36640 FNfetch2(2,8)
36649 
36658 .DD%(&64)
36667 .LD_IXh_IXh
36676 FNfetch2(2,8)
36685 
36694 .FD%(&64)
36703 .LD_IYh_IYh
36712 FNfetch2(2,8)
36721 
36730 .DD%(&65)
36739 .LD_IXh_IXl
36748 BIC IX,IX,#&FF00
36757 ADD IX,IX,IX,LSL#8
36766 FNfetch2(2,8)
36775 
36784 .FD%(&65)
36793 .LD_IYh_IYl
36802 BIC IY,IY,#&FF00
36811 ADD IY,IY,IY,LSL#8
36820 FNfetch2(2,8)
36829 
36838 .LD_IXh_A
36847 .DD%(&67)
36856 AND IX,IX,#&FF
36865 ADD IX,IX,A,LSL#8
36874 FNfetch2(2,8)
36883 
36892 .LD_IYh_A
36901 .FD%(&67)
36910 AND IY,IY,#&FF
36919 ADD IY,IY,A,LSL#8
36928 FNfetch2(2,8)
36937 
36946 .LD_IXl_B
36955 .DD%(&68)
36964 BIC IX,IX,#&FF
36973 ADD IX,IX,BC,LSR#8
36982 FNfetch2(2,8)
36991 
37000 .LD_IYl_B
37009 .FD%(&68)
37018 BIC IY,IY,#&FF
37027 ADD IY,IY,BC,LSR#8
37036 FNfetch2(2,8)
37045 
37054 .LD_IXl_C
37063 .DD%(&69)
37072 BIC IX,IX,#&FF
37081 AND R0,BC,#&FF
37090 ADD IX,IX,R0
37099 FNfetch2(2,8)
37108 
37117 .LD_IYl_C
37126 .FD%(&69)
37135 BIC IY,IY,#&FF
37144 AND R0,BC,#&FF
37153 ADD IY,IY,R0
37162 FNfetch2(2,8)
37171 
37180 .DD%(&6A)
37189 .LD_IXl_D
37198 BIC IX,IX,#&FF
37207 ADD IX,IX,DE,LSR#8
37216 FNfetch2(2,8)
37225 
37234 .FD%(&6A)
37243 .LD_IYl_D
37252 BIC IY,IY,#&FF
37261 ADD IY,IY,DE,LSR#8
37270 FNfetch2(2,8)
37279 
37288 .DD%(&6B)
37297 .LD_IXl_E
37306 AND IX,IX,#&FF00
37315 AND R0,DE,#&FF
37324 ADD IX,IX,R0
37333 FNfetch2(2,8)
37342 
37351 .FD%(&6B)
37360 .LD_IYl_E
37369 AND IY,IY,#&FF00
37378 AND R0,DE,#&FF
37387 ADD IY,IY,R0
37396 FNfetch2(2,8)
37405 
37414 .DD%(&6C)
37423 .LD_IXl_IXh
37432 BIC IX,IX,#&FF
37441 ADD IX,IX,IX,LSR#8
37450 FNfetch2(2,8)
37459 
37468 .FD%(&6C)
37477 .LD_IYl_IYh
37486 BIC IY,IY,#&FF
37495 ADD IY,IY,IY,LSR#8
37504 FNfetch2(2,8)
37513 
37522 .DD%(&6D)
37531 .LD_IXl_IXl
37540 FNfetch2(2,8)
37549 
37558 .FD%(&6D)
37567 .LD_IYl_IYl
37576 FNfetch2(2,8)
37585 
37594 .LD_IXl_A
37603 .DD%(&6F)
37612 BIC IX,IX,#&FF
37621 ADD IX,IX,A
37630 FNfetch2(2,8)
37639 
37648 .LD_IYl_A
37657 .FD%(&6F)
37666 BIC IY,IY,#&FF
37675 ADD IY,IY,A
37684 FNfetch2(2,8)
37693 
37702 .LD_A_IXh
37711 .DD%(&7C)
37720 MOV A,IX,LSR#8
37729 FNfetch2(2,8)
37738 
37747 .LD_A_IYh
37756 .FD%(&7C)
37765 MOV A,IY,LSR#8
37774 FNfetch2(2,8)
37783 
37792 .LD_A_IXl
37801 .DD%(&7D)
37810 AND A,IX,#&FF
37819 FNfetch2(2,8)
37828 
37837 .LD_A_IYl
37846 .FD%(&7D)
37855 AND A,IY,#&FF
37864 FNfetch2(2,8)
37873 
37882 .DD%(&84)
37891 .ADD_A_IXh
37900 FNadd2(IX,2,8)
37909 
37918 .FD%(&84)
37927 .ADD_A_IYh
37936 FNadd2(IY,2,8)
37945 
37954 .ADD_A_IXl
37963 .DD%(&85)
37972 FNadd1(IX,2,8)
37981 
37990 .ADD_A_IYl
37999 .FD%(&85)
38008 FNadd1(IY,2,8)
38017 
38026 .DD%(&8C)
38035 .ADC_A_IXh
38044 FNadc2(IX,2,8)
38053 
38062 .FD%(&8C)
38071 .ADC_A_IYh
38080 FNadc2(IY,2,8)
38089 
38098 .DD%(&8D)
38107 .ADC_A_IXl
38116 FNadc1(IX,2,8)
38125 
38134 .FD%(&8D)
38143 .ADC_A_IYl
38152 FNadc1(IY,2,8)
38161 
38170 .DD%(&94)
38179 .SUB_IXh
38188 FNsub2(IX,2,8)
38197 
38206 .FD%(&94)
38215 .SUB_IYh
38224 FNsub2(IY,2,8)
38233 
38242 .SUB_IXl
38251 .DD%(&95)
38260 FNsub1(IX,2,8)
38269 
38278 .SUB_IYl
38287 .FD%(&95)
38296 FNsub1(IY,2,8)
38305 
38314 .DD%(&9C)
38323 .SBC_A_IXh
38332 FNsbc2(IX,2,8)
38341 
38350 .FD%(&9C)
38359 .SBC_A_IYh
38368 FNsbc2(IY,2,8)
38377 
38386 .DD%(&9D)
38395 .SBC_A_IXl
38404 FNsbc1(IX,2,8)
38413 
38422 .FD%(&9D)
38431 .SBC_A_IYl
38440 FNsbc1(IY,2,8)
38449 
38458 .DD%(&A4)
38467 .and_IXh
38476 FNand2(IX,2,8)
38485 
38494 .FD%(&A4)
38503 .and_IYh
38512 FNand2(IY,2,8)
38521 
38530 .DD%(&A5)
38539 .and_IXl
38548 FNand1(IX,2,8)
38557 
38566 .FD%(&A5)
38575 .and_IYl
38584 FNand1(IY,2,8)
38593 
38602 .DD%(&AC)
38611 .xor_IXh
38620 FNxor2(IX,2,8)
38629 
38638 .FD%(&AC)
38647 .xor_IYh
38656 FNxor2(IY,2,8)
38665 
38674 .DD%(&AD)
38683 .xor_IXl
38692 FNxor1(IX,2,8)
38701 
38710 .FD%(&AD)
38719 .xor_IYl
38728 FNxor1(IY,2,8)
38737 
38746 .DD%(&B4)
38755 .or_IXh
38764 FNor2(IX,2,8)
38773 
38782 .FD%(&B4)
38791 .or_IYh
38800 FNor2(IY,2,8)
38809 
38818 .DD%(&B5)
38827 .or_IXl
38836 FNor1(IX,2,8)
38845 
38854 .FD%(&B5)
38863 .or_IYl
38872 FNor1(IY,2,8)
38881 
38890 .DD%(&BC)
38899 .CP_IXh
38908 FNcp2(IX,2,8)
38917 
38926 .FD%(&BC)
38935 .CP_IYh
38944 FNcp2(IY,2,8)
38953 
38962 .DD%(&BD)
38971 .CP_IXl
38980 FNcp1(IX,2,8)
38989 
38998 .FD%(&BD)
39007 .CP_IYl
39016 FNcp1(IY,2,8)
39025 
39034 .undefined_opcode
39043 FNprints("Undefined Opcode")
39052 FNfetch2(2,0)
39061 
39070 .showregs
39079 ;SWI &100+31
39088 ;SWI &100
39097 ;SWI &100
39106 ;FNprint(zpc)
39115 ;SWI &10A
39124 ;MOV PC,R14
39133 
39142 ;CMP zpc,#&0007<<16
39151 ;MOVLS PC,R14
39160 ;CMP zpc,#&00E5<<16
39169 ;MOVEQ PC,R14
39178 ;SWI &100+31
39187 ;SWI &100
39196 ;SWI &100
39205 MOV R1,zpc
39214 SWI "Z80_ShowRegs"
39223 MOV R1,IX
39232 SWI "Z80_ShowIX"
39241 MOV R1,IY
39250 SWI "Z80_ShowIYSP"
39259 SWI &120
39268 MOV R1,zpc
39277 SWI "Z80_Showloc"
39286 SWI &10A
39295 MOV PC,R14
39304 
39313 .undoc_DDCB
39322 ADD zpc,zpc,#1<<16
39331 
39340 .opcode_CB
39349 ]:IF emuR THEN [OPTp:ADD RI,RI,#1 << 25 ; R reg emulation:]
39358 [OPTp
39367 ;ADD R1,R3,zpc,LSR#16
39376 FNsetR1
39385 LDRB R0,[R1,#1]!
39394 ADR R14,CBtable
39403 LDR pc,[R14,R0,LSL#2]
39412 
39421 ="CB.."
39430 .CBtable
39439 ]
39448 FOR I%=0 TO 255
39457 [OPTp
39466 & CB%(I%)
39475 ]
39484 NEXT
39493 
39502 REM end of CBtable
39511 
39520 REM 0-7
39529 
39538 FOR REG%=0 TO 14 : REM B,C,D,E,H,L,hl,A,IX,IY,IXh,IXl,IYh,IYl
39547 Q$=FNrlc(REG%)
39556 NEXT
39565 
39574 REM 8-F
39583 
39592 FOR REG%=0 TO 14
39601 Q$=FNrrc(REG%)
39610 NEXT
39619 
39628 REM 10-17
39637 
39646 FOR REG%=0 TO 14
39655 Q$=FNrl(REG%)
39664 NEXT
39673 
39682 REM 18-1F
39691 
39700 FOR REG%=0 TO 14
39709 Q$=FNrr(REG%)
39718 NEXT
39727 
39736 REM 20-27
39745 
39754 FOR REG%=0 TO 14
39763 Q$=FNsla(REG%)
39772 NEXT
39781 
39790 REM 28-2F
39799 
39808 FOR REG%=0 TO 14
39817 Q$=FNsra(REG%)
39826 NEXT
39835 
39844 REM 30-37 (undocumented)
39853 
39862 FOR REG%=0 TO 14
39871 Q$=FNsll(REG%)
39880 NEXT
39889 
39898 REM 38-3F
39907 
39916 FOR REG%=0 TO 14
39925 Q$=FNsrl(REG%)
39934 NEXT
39943 
39952 REM 40-7F
39961 
39970 FOR bit%=0 TO 7
39979 FOR REG%=0 TO 14 : REM B,C,D,E,H,L,hl,A
39988 IF REG%<>8 Q$=FNbit(bit%,REG%)
39997 NEXT
40006 NEXT
40015 
40024 REM 80-BF
40033 
40042 FOR bit%=0 TO 7
40051 FOR REG%=0 TO 14 : REM B,C,D,E,H,L,hl,A
40060 IF REG%<>8 Q$=FNres(bit%,REG%)
40069 NEXT
40078 NEXT
40087 
40096 REM C0-FF
40105 
40114 FOR bit%=0 TO 7
40123 FOR REG%=0 TO 14 : REM B,C,D,E,H,L,hl,A
40132 IF REG%<>8 Q$=FNset(bit%,REG%)
40141 NEXT
40150 NEXT
40159 
40168 [OPTp
40177 
40186 .show_regs
40195 MOV PC,R14
40204 FNprint(zpc)
40213 SWI &10A
40222 MOV PC,R14
40231 
40240 .DD%(&DD)
40249 FNfetch2(1,4)
40258 
40267 .DD%(&FD)
40276 FNfetch2(1,4)
40285 
40294 .FD%(&DD)
40303 FNfetch2(1,4)
40312 
40321 .FD%(&FD)
40330 FNfetch2(1,4)
40339 
40348 
40357 .opcode_DD
40366 ]:IF emuR THEN [OPTp:ADD RI,RI,#1 << 25 ; R reg emulation:]
40375 [OPTp
40384 ;ADD R1,R3,zpc,LSR#16
40393 FNsetR1
40402 LDRB R0,[R1,#1]!
40411 ADR R14,DDtable
40420 LDR pc,[R14,R0,LSL#2]
40429 
40438 ="DD.."
40447 .DDtable
40456 ]
40465 
40474 FORI%=0 TO &FF
40483 [OPTp : & DD%(I%) : ]
40492 NEXT
40501 
40510 [OPTp
40519 .opcode_ED
40528 ]:IF emuR THEN [OPTp:ADD RI,RI,#1 << 25 ; R reg emulation:]
40537 [OPTp
40546 ;ADD R1,R3,zpc,LSR#16
40555 FNsetR1
40564 LDRB R0,[R1,#1]!
40573 ADR R14,EDtable
40582 LDR pc,[R14,R0,LSL#2]
40591 ]
40600 [OPT p
40609 
40618 ="ED.."
40627 .EDtable
40636 
40645 ; &00-&3F
40654 
40663 FNequd(&40,undoc_ED) ; all NOPs (undocumented)
40672 
40681 ; &40-4F
40690 
40699 & IN_B_c
40708 & OUT_c_B
40717 & SBC_HL_BC
40726 & LD_nn_BC
40735 & NEG
40744 & RETN
40753 & IM0
40762 & LD_I_A
40771 & IN_C_c
40780 & OUT_c_C
40789 & ADC_HL_BC
40798 & LD_BC_nn
40807 & NEG ; undocumented
40816 & RETI
40825 & IM0 ; undocumented
40834 & LD_R_A
40843 
40852 ; &50-5F
40861 
40870 & IN_D_c
40879 & OUT_c_D
40888 & SBC_HL_DE
40897 & LD_nn_DE
40906 & NEG  ; undocumented
40915 & RETN ; undocumented
40924 & IM1
40933 & LD_A_I
40942 & IN_E_c
40951 & OUT_c_E
40960 & ADC_HL_DE
40969 & LD_DE_nn
40978 & NEG  ; undocumented
40987 & RETI ; undocumented
40996 & IM2
41005 & LD_A_R
41014 
41023 ; &60-6F
41032 
41041 & IN_H_c
41050 & OUT_c_H
41059 & SBC_HL_HL
41068 & LD_nn_HL2
41077 & NEG  ; undocumented
41086 & RETN ; undocumented
41095 & IM0  ; undocumented
41104 & RRD
41113 & IN_L_c
41122 & OUT_c_L
41131 & ADC_HL_HL
41140 & LD_HL_nn2
41149 & NEG  ; undocumented
41158 & RETN ; undocumented
41167 & IM0  ; undocumented
41176 & RLD
41185 
41194 ; &70-9F
41203 
41212 FNequd(1,undoc_ED) ; IN X,(C)
41221 FNequd(1,undoc_ED) ; OUT C,X(0)
41230 & SBC_HL_SP
41239 & LD_nn_SP
41248 & NEG  ; undocumented
41257 & RETN ; undocumented
41266 & IM1  ; undocumented
41275 FNequd(1,undoc_ED) ; NOP (undocumented)
41284 & IN_A_c
41293 & OUT_c_A
41302 & ADC_HL_SP
41311 & LD_SP_nn
41320 & NEG  ; undocumented
41329 & RETN ; undocumented
41338 & IM2  ; undocumented
41347 FNequd(33,undoc_ED) ; NOPs (undocumented)
41356 
41365 ; &A0-AF
41374 
41383 & LDI
41392 & CPI
41401 & INI
41410 & OUTI
41419 FNequd(4,undoc_ED)
41428 & LDD
41437 & CPD
41446 & IND
41455 & OUTD
41464 FNequd(4,undoc_ED)
41473 
41482 ; &B0-BF
41491 
41500 & LDIR
41509 & CPIR
41518 & INIR
41527 & OTIR
41536 FNequd(4,undoc_ED)
41545 & LDDR
41554 & CPDR
41563 & INDR
41572 & OTDR
41581 FNequd(4,undoc_ED)
41590 
41599 ; &C0-FF
41608 
41617 FNequd(&3B,undoc_ED)
41626 & multi_load ; xzx's multiloader option
41635 & TAP
41644 FNequd(2,undoc_ED)
41653 & EXIT
41662 
41671 ; end of EDtable
41680 
41689 .opcode_FD
41698 ]:IF emuR THEN [OPTp:ADD RI,RI,#1 << 25 ; R reg emulation:]
41707 [OPTp
41716 ;ADD R1,R3,zpc,LSR#16
41725 FNsetR1
41734 LDRB R0,[R1,#1]!
41743 ADR R14,FDtable
41752 LDR pc,[R14,R0,LSL#2]
41761 
41770 ="FD.."
41779 .FDtable
41788 ]
41797 
41806 FORI%=0 TO &FF
41815 [OPTp : & FD%(I%) : ]
41824 NEXT
41833 
41842 [OPTp
41851 
41860 .DD%(&CB)
41869 LDRB R0,[R1,#2]
41878 ADR R14,DDCBtable
41887 LDR pc,[R14,R0,LSL#2]
41896 
41905 .DD%(&CD)
41914 ADD zpc,zpc,#1 << 16
41923 B call
41932 
41941 ="DDCB"
41950 .DDCBtable
41959 ]
41968 
41977 FORI%=0 TO &FF
41986 [OPTp : & DDCB%(I%) : ]
41995 NEXT
42004 
42013 [OPTp
42022 
42031 
42040 .FD%(&CB)
42049 LDRB R0,[R1,#2]
42058 ADR R14,FDCBtable
42067 LDR pc,[R14,R0,LSL#2]
42076 
42085 ="FDCB"
42094 .FDCBtable
42103 ]
42112 
42121 FORI%=0 TO &FF
42130 [OPTp : & FDCB%(I%) : ]
42139 NEXT
42148 
42157 FOR bit%=0 TO 7
42166 FORI%=9 TO 10
42175 Q$=FNbit(bit%,I%)
42184 Q$=FNres(bit%,I%)
42193 Q$=FNset(bit%,I%)
42202 NEXT
42211 NEXT
42220 
42229 [OPT p
42238 ;FNalign16
42247 
42256 .zs_table  & flagZ:= STRING$(124,CHR$ 0)+STRING$(128,CHR$ flagS)
42265 .pzs_table & 0:= STRING$(252,CHR$ 0)
42274 
42283 REM *************************************************
42292 REM * Dominic symes sound code                      *
42301 REM *************************************************
42310 
42319 ;E R13=<0 called on an interrupt before R13 updated
42328 ;X Buffered sound output and time syncronised
42337 
42346 .d_interrupt                  ; to be called on a spec interupt
42355 STR R14,d_stash_ret;MOV R1,R14
42364 ]
42373 REM ************************************************
42382 REM JBS: This was just
42391 REM MOV R13,#0
42400 REM which is wrong when tape is TRUE
42409 REM
42418 IF tapeX THEN [OPT p:STR R13, d_stash_R13:]
42427 REM ************************************************
42436 [OPT p
42445 MOV R13,#0
42454 BL d_update                   ; update buffer to this time
42463 ADR R0,d_sample
42472 SWI "Z80_SoundPlay"           ; play the sample
42481 FNsetR3
42490 SUB R0,R3,#-delay             ; (delay is a -ve offset)
42499 LDR R0,[R0]
42508 LDR R14,[R3,#sound_16bit]:TEQ R14,#0
42517 MOV R14,R0,LSR #1:BNE d_div500
42526 ;d_div400 ; 8bit sound
42535 ADD R14,R14,R0,LSR #3:ADD R14,R14,R0,LSR #6
42544 SUB R14,R14,R0,LSR #11:SUB R14,R14,R0,LSR #13:SUB R14,R14,R0,LSR #16
42553 ADD R14,R14,R14,LSR #20:MOV R14,R14,LSR #8:RSB R1,R14,R14,LSL #2
42562 ADD R1,R14,R1,LSL #3:SUBS R1,R0,R1,LSL #4:SUBMI R14,R14,#1
42571 ADDMI R1,R1,#400:CMP R1,#400
42580 B d_donediv
42589 .d_div500 ; 16bit sound (8bit emulation)
42598 ADD R14,R14,R14,LSR #5:ADD R14,R14,R14,LSR #10:ADD R14,R14,R14,LSR #20
42607 MOV R14,R14,LSR #8:RSB R1,R14,R14,LSL #5:SUBS R1,R0,R1,LSL #4
42616 SUBMI R14,R14,#1:ADDMI R1,R1,#496:CMP R1,#496
42625 .d_donediv
42634 ADDGE R14,R14,#1
42643 SUB R0,R0,R14
42652 STR R0,d_nextT                ; next T state
42661 STR R14,d_dec
42670 MOV R0,#0
42679 STR R0,d_sampleoff            ; current sample offset
42688 ]
42697 REM ***********************************************
42706 REM JBS: Pull back R13
42715 REM
42724 IF tapeX THEN [OPT p:LDR R13, d_stash_R13:]
42733 REM ***********************************************
42742 [OPT p
42751 LDR PC,d_stash_ret;MOV PC,R1
42760 
42769 .d_stash_R13 & 0
42778 .d_stash_ret & 0
42787 
42796 ;E A=the value which is being OUT'ed
42805 ; Sound is in BIT 4.
42814 ;X value outed R1 corrupt
42823 
42832 .d_tape_eor & 0
42841 
42850 .d_out_tape
42859 LDR R0,d_tape_eor:RSB R0,R0,#256:STR R0,d_tape_eor
42868 MOV R1,#0
42877 
42886 ;E A=the value which is being OUT'ed
42895 ; Sound is in BIT 4.
42904 ;X value outed R1 corrupt
42913 
42922 .d_out1
42931 STR R14,d_ret1
42940 LDR R0,d_state                ; old state
42949 TST R1,#%1<<4
42958 MOVEQ R1,#2                   ; off
42967 MOVNE R1,#&FE                 ; on
42976 LDR R14,d_tape_eor:TEQ R14,#0:RSBNE R1,R1,#256 ; invert fiddle
42985 TEQ R0,R1                     ; state change
42994 LDREQ PC,d_ret1               ; no
43003 BL d_update                   ; update buffer to current time
43012 STR R1,d_state                ; new state
43021 BL d_updateone                ; make sure buffers at least once
43030 LDR PC,d_ret1                 ; return
43039 .d_ret1 & 0
43048 
43057 ;E R13=current T-state value
43066 ;X buffer updated until this time. Corrupts R0,R14
43075 
43084 .d_update
43093 ADR R0,d_stack1
43102 STMIA R0,{R1-R4}
43111 ADR R4,d_sample
43120 LDR R3,d_nextT                ; base of current T state box
43129 LDR R2,d_sampleoff
43138 LDR R1,d_state                ; old state
43147 LDR R0,d_dec
43156 .d_uloop
43165 CMP R13,R3
43174 BGT d_end                     ; already done this box
43183 STRB R1,[R4,R2,LSR#21]        ; write the state
43192 ADD R2,R2,#1<<21              ; new sample offset
43201 SUB R3,R3,R0                  ; next T state box
43210 B d_uloop                     ; do next byte
43219 .d_end                        ; got to current position
43228 STR R3,d_nextT
43237 STR R2,d_sampleoff
43246 ADR R0,d_stack1
43255 LDMIA R0,{R1-R4}
43264 MOV PC,R14
43273 
43282 .d_updateone
43291 ADR R0,d_stack1
43300 STMIA R0,{R1-R4}
43309 ADR R4,d_sample
43318 LDR R3,d_nextT                ; base of current T state box
43327 LDR R0,d_dec
43336 SUB R1,R13,R3
43345 CMP R1,R0,LSL#1               ; allow a 2 state drift
43354 BGT d_toomuchdrift
43363 LDR R2,d_sampleoff
43372 LDR R1,d_state                ; old state
43381 STRB R1,[R4,R2,LSR#21]        ; write the state
43390 ADD R2,R2,#1<<21              ; new sample offset
43399 SUB R3,R3,R0                  ; next T state box
43408 STR R3,d_nextT
43417 STR R2,d_sampleoff
43426 .d_toomuchdrift
43435 ADR R0,d_stack1
43444 LDMIA R0,{R1-R4}
43453 MOV PC,R14
43462 
43471 .d_sampleoff    & 0        ; next sample off to write <<24
43480 .d_nextT        & 0        ; next T state to write
43489 .d_state        & 0        ; current amplitude
43498 .d_dec          & &2000000 ; decrement value
43507 
43516 .d_stack1 & 0:& 0:& 0:& 0
43525 
43534 .d_sample                     ; currently stored sample
43543 =STRING$(255,CHR$0):=STRING$(440-255,CHR$0)
43552 ]
43561 REM *************************************************
43570 REM * End of sound code                             *
43579 REM *************************************************
43588 
43597 end=P%
43606 
43615 FOR I%=0 TO 255
43624 zs_table?I%=zs_table?I% OR (I% AND %10101000) : REM S flag and undoc'd opcodes
43633 A%=I% EOR (I%>>4)
43642 A%=A% EOR (A%>>2)
43651 A%=A% EOR (A%>>1)
43660 A%=A% AND 1
43669  pzs_table?I%=zs_table?I%
43678 IF A%=0 THEN pzs_table?I%=(pzs_table?I%) EOR flagP : REM Parity
43687  IF DD%(I%) ELSE DDtable!(I%*4-start+code%)=undoc_DD
43696  IF FD%(I%) ELSE FDtable!(I%*4-start+code%)=undoc_FD
43705  IF DDCB%(I%) ELSE DDCBtable!(I%*4-start+code%)=undoc_DDCB:FDCBtable!(I%*4-start+code%)=undoc_DDCB
43714 NEXT
43723 
43732 IF p=2 OR p=6 THEN PRINT(end-start)/1024
43741 ENDPROC
43750 
43759 DEFFNkempston(R)
43768 IF R=1 OR R=3 THEN STOP
43777 [OPTp
43786 FNsetR3
43795 LDR R0,[R3,#keysptr]:LDMIA R0,{R1,R3}
43804 MOV R,#0
43813 TST R3,#%1
43822 ORREQ R,R,#%10000
43831 TST R3,#%100
43840 ORREQ R,R,#%1
43849 TST R3,#%1000
43858 ORREQ R,R,#%1000
43867 TST R3,#%10000
43876 ORREQ R,R,#%100
43885 TST R1,#%10000<<24
43894 ORREQ R,R,#%10
43903 
43912 MOV R1,R
43921 MOV R0,#0
43930 SWI &63F40 ; "XJoystick_Read"
43939 BVS kemp(R)
43948 TST R0,#1 << 16         ; fire
43957 ORRNE R1,R1,#%10000
43966 ADD A,A,R0,LSL#24
43975 AND R0,R0,#&FF00
43984 MOV R0,R0,LSL#16
43993 CMP R0,#32 << 24
44002 ORRGT R1,R1,#%1        ; Up
44011 CMP R0,#&E0 << 24
44020 ORRLT R1,R1,#%10       ; Down
44029 AND R0,A,#&FF000000
44038 AND A,A,#&FF
44047 CMP R0,#32 << 24
44056 ORRGT R1,R1,#%1000      ; Right
44065 CMP R0,#&E0 << 24
44074 ORRLT R1,R1,#%100     ; Left
44083 .kemp(R)
44092 MOV R,R1
44101 ]
44110 =""
44119 
44128 DEFFNreadkey(R)
44137 IF R=0 OR R=3 THEN STOP
44146 [OPTp
44155 FNsetR3
44164 LDR R0,[R3,#keysptr]:LDMIA R0,{R0,R3}
44173 MOVS R14,#&BF
44182 TST R,#%1
44191 ;ADR R1,keys
44200 ANDEQ R14,R14,R0
44209 TST R,#%10
44218 ANDEQ R14,R14,R0,LSR #8
44227 TST R,#%100
44236 ANDEQ R14,R14,R0,LSR #16
44245 TST R,#%1000
44254 ANDEQ R14,R14,R0,LSR #24
44263 TST R,#%10000
44272 ANDEQ R14,R14,R3
44281 TST R,#%100000
44290 ANDEQ R14,R14,R3,LSR #8
44299 TST R,#%1000000
44308 ANDEQ R14,R14,R3,LSR #16
44317 TST R,#%10000000
44326 ANDEQ R14,R14,R3,LSR #24
44335 BIC F,F,#%11111110 ; H?
44344 CMP R14,#0
44353 ORREQ F,F,#%1000000
44362 AND R0,R14,#%10101000
44371 ORR F,F,R0
44380 ]
44389 =""
44398 
44407 DEFFNJR(T%)
44416 [OPTp
44425 ADD R0,zpc,#1 << 16
44434 ;LDRB R0,[R3,R0,LSR#16]
44443 FNldrb2(0,3,0)
44452 ADD zpc,zpc,R0,LSL#16
44461 CMP R0,#&80
44470 SUBGE zpc,zpc,#254 << 16
44479 ADDLT zpc,zpc,#2 << 16
44488 FNfetch2(0,T%)
44497 ]
44506 =""
44515 
44524 DEFPROCsetaddr(O%,R%)
44533 CASE reg%(R%) AND &300 OF
44542 WHEN &000:CB%(O%+(R% AND 7))=P%
44551 WHEN &200:DDCB%(O%+5-(reg%(R%)>>7 AND 1))=P%
44560 WHEN &300:FDCB%(O%+5-(reg%(R%)>>7 AND 1))=P%
44569 ENDCASE
44578 ENDPROC
44587 
44596 DEFFNrlc(R%)
44605 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
44614 IF (r% AND 32) = 32 THEN =FNrlcixy
44623 PROCsetaddr(&00,R%)
44632 IF (r% AND 64) = 64 THEN =FNrlchl
44641 IF (r% AND 128) = 128 THEN =FNrlc2(reg%) ELSE =FNrlc1(reg%)
44650 
44659 DEFFNrlc1(R)
44668 [OPTp
44677 AND R1,R,#&FF
44686 ADD R1,R1,R1,LSL#24
44695 MOVS R1,R1,ROR#31 ; ROL#1
44704 ;FNsetupC
44713 BIC F,F,#%11010011
44722 FNsetupSZ
44731 ANDS R0,R1,#%1 : ORRNE F,F,#%1
44740 AND R1,R1,#&FF
44749 BIC R,R,#&FF
44758 ADD R,R,R1
44767 FNfetch2(2,8)
44776 ]
44785 =""
44794 
44803 DEFFNrlc2(R)
44812 [OPTp
44821 MOV R1,R,LSR#8
44830 ADD R1,R1,R1,LSL#24
44839 MOVS R1,R1,ROR#31 ; ROL#1
44848 ;FNsetupC
44857 BIC F,F,#%11010011
44866 FNsetupSZ
44875 ANDS R0,R1,#%1 : ORRNE F,F,#%1
44884 AND R1,R1,#&FF
44893 BIC R,R,#&FF00
44902 ADD R,R,R1,LSL#8
44911 FNfetch2(2,8)
44920 ]
44929 =""
44938 
44947 DEFFNrlchl
44956 [OPTp
44965 FNldrb(1,3,HL)
44974 ADD R1,R1,R1,LSL#24
44983 MOVS R1,R1,ROR#31 ; ROL#1
44992 ;FNsetupC
45001 BIC F,F,#%11010011
45010 FNsetupSZ
45019 ANDS R0,R1,#%1 : ORRNE F,F,#%1
45028 ;FNwp(HL)
45037 ;STRHSB R1,[R3,HL]
45046 FNstr(1,3,HL)
45055 FNfetch2(2,15)
45064 ]
45073 =""
45082 
45091 DEFFNrlcixy
45100 IF reg%=IX THEN [OPTp : .DDCB%(&06) : ] ELSE [OPTp : .FDCB%(&06) : ]
45109 [OPTp
45118 LDRB R0,[R1,#1]
45127 ;ADD R0,R0,reg%
45136 FNaddixiy(0,reg%)
45145 ;LDRB R1,[R3,R0]
45154 FNldrb(1,3,0)
45163 ADD R1,R1,R1,LSL#24
45172 MOVS R1,R1,ROR#31 ; ROL#1
45181 ;FNsetupC
45190 BIC F,F,#%11010011
45199 FNsetupSZ
45208 ANDS R14,R1,#%1 : ORRNE F,F,#%1
45217 ;FNwp(0)
45226 ;STRHSB R1,[R3,R0]
45235 FNstr(1,3,0)
45244 FNfetch2(4,23)
45253 ]
45262 =""
45271 
45280 DEFFNrrc(R%)
45289 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
45298 IF (r% AND 32) = 32 THEN =FNrrcixy
45307 PROCsetaddr(8,R%)
45316 IF (r% AND 64) = 64 THEN =FNrrchl
45325 IF (r% AND 128) = 128 THEN =FNrrc2(reg%) ELSE =FNrrc1(reg%)
45334 
45343 DEFFNrrc1(R)
45352 [OPTp
45361 AND R1,R,#&FF
45370 ADD R1,R1,R1,LSL#8
45379 BIC R1,R1,#%1111111000000000 ; make sure Z works
45388 MOVS R1,R1,ROR#1
45397 FNsetupC
45406 BIC F,F,#%11010010
45415 FNsetupSZ
45424 AND R1,R1,#&FF
45433 BIC R,R,#&FF
45442 ADD R,R,R1
45451 FNfetch2(2,8)
45460 ]
45469 =""
45478 
45487 DEFFNrrc2(R)
45496 [OPTp
45505 MOV R1,R,LSR#8
45514 ADD R1,R1,R1,LSL#8
45523 BIC R1,R1,#%1111111000000000 ; make sure Z works
45532 MOVS R1,R1,ROR#1
45541 FNsetupC
45550 BIC F,F,#%11010010
45559 FNsetupSZ
45568 AND R1,R1,#&FF
45577 BIC R,R,#&FF00
45586 ADD R,R,R1,LSL#8
45595 FNfetch2(2,8)
45604 ]
45613 =""
45622 
45631 DEFFNrrchl
45640 [OPTp
45649 ;LDRB R1,[R3,HL]
45658 FNldrb(1,3,HL)
45667 ADD R1,R1,R1,LSL#8
45676 BIC R1,R1,#%1111111000000000 ; make sure Z works
45685 MOVS R1,R1,ROR#1
45694 FNsetupC
45703 BIC F,F,#%11010010
45712 FNsetupSZ
45721 ;FNwp(HL)
45730 ;STRHSB R1,[R3,HL]
45739 FNstr(1,3,HL)
45748 FNfetch2(2,15)
45757 ]
45766 =""
45775 
45784 DEFFNrrcixy
45793 IF reg%=IX THEN [OPTp : .DDCB%(&0E) : ] ELSE [OPTp : .FDCB%(&0E) : ]
45802 [OPTp
45811 LDRB R0,[R1,#1]
45820 ;ADD R0,R0,reg%
45829 FNaddixiy(0,reg%)
45838 ;LDRB R1,[R3,R0]
45847 FNldrb(1,3,0)
45856 ADD R1,R1,R1,LSL#8
45865 BIC R1,R1,#%1111111000000000 ; make sure Z works
45874 MOVS R1,R1,ROR#1
45883 FNsetupC
45892 BIC F,F,#%11010010
45901 FNsetupSZ
45910 ;FNwp(0)
45919 ;STRHSB R1,[R3,R0]
45928 FNstr(1,3,0)
45937 FNfetch2(4,23)
45946 ]
45955 =""
45964 
45973 DEFFNrl(R%)
45982 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
45991 IF (r% AND 32) = 32 THEN =FNrlixy
46000 PROCsetaddr(&10,R%)
46009 IF (r% AND 64) = 64 THEN =FNrlhl
46018 IF (r% AND 128) = 128 THEN =FNrl2(reg%) ELSE =FNrl1(reg%)
46027 
46036 DEFFNrl1(R)
46045 [OPTp
46054 ;AND R0,F,#%1
46063 ;BIC F,F,#%11010111
46072 ;MOVS R1,R,LSL#25
46081 ;ORRCS F,F,#%1
46090 ;ADDS R1,R1,R0,LSL#24
46099 ;FNsetupSZ
46108 ;BIC R,R,#&FF
46117 ;ADD R,R,R1,LSR#24
46126 
46135 AND R1,R,#&FF
46144 ADD R1,R1,R1,LSL#24
46153 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
46162 BIC R1,R1,#%10000000 ; make sure Z works
46171 ADCS R1,R1,R1 ; MOVS R1,R1,RLX
46180 FNsetupC
46189 BIC F,F,#%11010010
46198 FNsetupSZ
46207 AND R1,R1,#&FF
46216 BIC R,R,#&FF
46225 ADD R,R,R1
46234 FNfetch2(2,8)
46243 ]
46252 =""
46261 
46270 DEFFNrl2(R)
46279 [OPTp
46288 MOV R1,R,LSR#8
46297 ADD R1,R1,R1,LSL#24
46306 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
46315 BIC R1,R1,#%10000000 ; make sure Z works
46324 ADCS R1,R1,R1 ; MOVS R1,R1,RLX
46333 FNsetupC
46342 BIC F,F,#%11010010
46351 FNsetupSZ
46360 AND R1,R1,#&FF
46369 BIC R,R,#&FF00
46378 ADD R,R,R1,LSL#8
46387 FNfetch2(2,8)
46396 ]
46405 =""
46414 
46423 DEFFNrlhl
46432 [OPTp
46441 ;LDRB R1,[R3,HL]
46450 FNldrb(1,3,HL)
46459 ADD R1,R1,R1,LSL#24
46468 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
46477 BIC R1,R1,#%10000000 ; make sure Z works
46486 ADCS R1,R1,R1 ; MOVS R1,R1,RLX
46495 FNsetupC
46504 BIC F,F,#%11010010
46513 FNsetupSZ
46522 ;FNwp(HL)
46531 ;STRHSB R1,[R3,HL]
46540 FNstr(1,3,HL)
46549 FNfetch2(2,15)
46558 ]
46567 =""
46576 
46585 DEFFNrlixy
46594 IF reg%=IX THEN [OPTp : .DDCB%(&16) : ] ELSE [OPTp : .FDCB%(&16) : ]
46603 [OPTp
46612 LDRB R0,[R1,#1]
46621 ;ADD R0,R0,reg%
46630 FNaddixiy(0,reg%)
46639 MOVS R1,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
46648 ;LDRB R1,[R3,R0]
46657 FNldrb(1,3,0)
46666 ADD R1,R1,R1,LSL#24
46675 BIC R1,R1,#%10000000 ; make sure Z works
46684 ADCS R1,R1,R1 ; MOVS R1,R1,RLX
46693 FNsetupC
46702 BIC F,F,#%11010010
46711 FNsetupSZ
46720 ;FNwp(0)
46729 ;STRHSB R1,[R3,R0]
46738 FNstr(1,3,0)
46747 FNfetch2(4,23)
46756 ]
46765 =""
46774 
46783 DEFFNrr(R%)
46792 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
46801 IF (r% AND 32) = 32 THEN =FNrrixy
46810 PROCsetaddr(&18,R%)
46819 IF (r% AND 64) = 64 THEN =FNrrhl
46828 IF (r% AND 128) = 128 THEN =FNrr2(reg%) ELSE =FNrr1(reg%)
46837 
46846 DEFFNrr1(R)
46855 [OPTp
46864 AND R1,R,#&FF
46873 ADD R1,R1,R1,LSL#24
46882 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
46891 MOVS R1,R1,RRX
46900 FNsetupC
46909 BIC F,F,#%11010010
46918 ANDS R1,R1,#&FF000000
46927 FNsetupSZ
46936 BIC R,R,#&FF
46945 ADD R,R,R1,LSR#24
46954 FNfetch2(2,8)
46963 ]
46972 =""
46981 
46990 DEFFNrr2(R)
46999 [OPTp
47008 MOV R1,R,LSR#8
47017 ADD R1,R1,R1,LSL#24
47026 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
47035 MOVS R1,R1,RRX
47044 FNsetupC
47053 BIC F,F,#%11010010
47062 ANDS R1,R1,#&FF000000
47071 FNsetupSZ
47080 BIC R,R,#&FF00
47089 ADD R,R,R1,LSR#16
47098 FNfetch2(2,8)
47107 ]
47116 =""
47125 
47134 DEFFNrrhl
47143 [OPTp
47152 ;LDRB R1,[R3,HL]
47161 FNldrb(1,3,HL)
47170 ADD R1,R1,R1,LSL#24
47179 MOVS R0,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
47188 MOVS R1,R1,RRX
47197 FNsetupC
47206 BIC F,F,#%11010010
47215 MOVS R1,R1,LSR#24
47224 FNsetupSZ
47233 ;FNwp(HL)
47242 ;STRHSB R1,[R3,HL]
47251 FNstr(1,3,HL)
47260 FNfetch2(2,15)
47269 ]
47278 =""
47287 
47296 DEFFNrrixy
47305 IF reg%=IX THEN [OPTp : .DDCB%(&1E) : ] ELSE [OPTp : .FDCB%(&1E) : ]
47314 [OPTp
47323 LDRB R0,[R1,#1]
47332 ;ADD R0,R0,reg%
47341 FNaddixiy(0,reg%)
47350 MOVS R1,F,RRX ; MOVE Z80 CARRY INTO ARM CARRY
47359 ;LDRB R1,[R3,R0]
47368 FNldrb(1,3,0)
47377 ADD R1,R1,R1,LSL#24
47386 MOVS R1,R1,RRX
47395 FNsetupC
47404 BIC F,F,#%11010010
47413 MOVS R1,R1,LSR#24
47422 FNsetupSZ
47431 ;FNwp(0)
47440 ;STRHSB R1,[R3,R0]
47449 FNstr(1,3,0)
47458 FNfetch2(4,23)
47467 ]
47476 =""
47485 
47494 DEFFNsla(R%)
47503 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
47512 IF (r% AND 32) = 32 THEN =FNslaixy
47521 PROCsetaddr(&20,R%)
47530 IF (r% AND 64) = 64 THEN =FNslahl
47539 IF (r% AND 128) = 128 THEN =FNsla2(reg%) ELSE =FNsla1(reg%)
47548 
47557 DEFFNsla1(R)
47566 [OPTp
47575 BIC F,F,#%11010011
47584 TST R,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
47593 MOVS R1,R,LSL#25 ; carry already done!
47602 ;FNsetupC
47611 FNsetupSZ
47620 BIC R,R,#&FF
47629 ADD R,R,R1,LSR#24
47638 FNfetch2(2,8)
47647 ]
47656 =""
47665 
47674 DEFFNsla2(R)
47683 [OPTp
47692 MOV R1,R,LSR#8
47701 BIC F,F,#%11010011
47710 TST R1,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
47719 MOVS R1,R1,LSL#25 ; carry already done!
47728 ;FNsetupC
47737 FNsetupSZ
47746 BIC R,R,#&FF00
47755 ADD R,R,R1,LSR#16
47764 FNfetch2(2,8)
47773 ]
47782 =""
47791 
47800 DEFFNslahl
47809 [OPTp
47818 ;LDRB R1,[R3,HL]
47827 FNldrb(1,3,HL)
47836 BIC F,F,#%11010011
47845 TST R1,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
47854 MOVS R1,R1,LSL#25 ; carry already done!
47863 MOV R1,R1,LSR#24
47872 ;FNsetupC
47881 FNsetupSZ
47890 ;FNwp(HL)
47899 ;STRHSB R1,[R3,HL]
47908 FNstr(1,3,HL)
47917 FNfetch2(2,15)
47926 ]
47935 =""
47944 
47953 DEFFNslaixy
47962 IF reg%=IX THEN [OPTp : .DDCB%(&26) : ] ELSE [OPTp : .FDCB%(&26) : ]
47971 [OPTp
47980 LDRB R0,[R1,#1]
47989 ;ADD R0,R0,reg%
47998 FNaddixiy(0,reg%)
48007 ;LDRB R1,[R3,R0]
48016 FNldrb(1,3,0)
48025 BIC F,F,#%11010011
48034 TST R1,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
48043 MOVS R1,R1,LSL#25 ; carry already done!
48052 MOV R1,R1,LSR#24
48061 ;FNsetupC
48070 FNsetupSZ
48079 ;FNwp(0)
48088 ;STRHSB R1,[R3,R0]
48097 FNstr(1,3,0)
48106 FNfetch2(4,23)
48115 ]
48124 =""
48133 
48142 DEFFNsra(R%)
48151 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
48160 IF (r% AND 32) = 32 THEN =FNsraixy
48169 PROCsetaddr(&28,R%)
48178 IF (r% AND 64) = 64 THEN =FNsrahl
48187 IF (r% AND 128) = 128 THEN =FNsra2(reg%) ELSE =FNsra1(reg%)
48196 
48205 DEFFNsra1(R)
48214 [OPTp
48223 BIC F,F,#&FF ; MRB 2/6/04
48232 MOV R1,R,LSL#24
48241 ;MOVS R1,R1,ASR#25
48250 MOV R1,R1,ASR#24
48259 MOVS R1,R1,RRX
48268 FNsetupC
48277 ANDS R1,R1,#&FF
48286 FNsetupZ
48295 BIC R,R,#&FF
48304 ADD R,R,R1
48313 AND R1,R1,#flagS+flag3+flag5
48322 ORR F,F,R1
48331 FNfetch2(2,8)
48340 ]
48349 =""
48358 
48367 DEFFNsra2(R)
48376 [OPTp
48385 BIC F,F,#&FF ; MRB 2/6/04
48394 MOV R1,R,LSL#16
48403 ;MOVS R1,R1,ASR#25
48412 MOV R1,R1,ASR#24
48421 MOVS R1,R1,RRX
48430 FNsetupC
48439 ANDS R1,R1,#&FF
48448 FNsetupZ
48457 BIC R,R,#&FF00
48466 ADD R,R,R1,LSL#8
48475 AND R1,R1,#(flagS+flag3+flag5)<<8
48484 ORR F,F,R1,LSR#8
48493 FNfetch2(2,8)
48502 ]
48511 =""
48520 
48529 DEFFNsrahl
48538 [OPTp
48547 ;LDRB R1,[R3,HL]
48556 BIC F,F,#&FF
48565 FNldrb(1,3,HL)
48574 MOV R1,R1,LSL#24
48583 MOV R1,R1,ASR#24
48592 MOVS R1,R1,RRX
48601 ORRCS F,F,#flagC
48610 ORREQ F,F,#flagZ
48619 AND R0,R1,#(flagS+flag3+flag5)
48628 ORR F,F,R0
48637 ;FNwp(HL)
48646 ;STRHSB R1,[R3,HL]
48655 FNstr(1,3,HL)
48664 FNfetch2(2,15)
48673 ]
48682 =""
48691 
48700 DEFFNsraixy
48709 IF reg%=IX THEN [OPTp : .DDCB%(&2E) : ] ELSE [OPTp : .FDCB%(&2E) : ]
48718 [OPTp
48727 LDRB R0,[R1,#1]
48736 ;ADD R0,R0,reg%
48745 FNaddixiy(0,reg%)
48754 ;LDRB R1,[R3,R0]
48763 FNldrb(1,3,0)
48772 BIC F,F,#&FF
48781 MOV R1,R1,LSL#24
48790 MOV R1,R1,ASR#24
48799 MOVS R1,R1,RRX
48808 ORRCS F,F,#flagC
48817 ORREQ F,F,#flagZ
48826 ;FNwp(0)
48835 ;STRHSB R1,[R3,R0]
48844 FNstr(1,3,0)
48853 AND R1,R1,#(flagS+flag3+flag5)
48862 ORR F,F,R1
48871 FNfetch2(4,23)
48880 ]
48889 =""
48898 
48907 DEFFNsrl(R%)
48916 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
48925 IF (r% AND 32) = 32 THEN =FNsrlixy
48934 PROCsetaddr(&38,R%)
48943 IF (r% AND 64) = 64 THEN =FNsrlhl
48952 IF (r% AND 128) = 128 THEN =FNsrl2(reg%) ELSE =FNsrl1(reg%)
48961 
48970 DEFFNsrl1(R)
48979 IF R=1 THEN STOP
48988 [OPTp
48997 BIC F,F,#&FF
49006 MOVS R1,R2,RRX ; CLEAR ARM CARRY
49015 AND R1,R,#&FF
49024 MOVS R1,R1,RRX
49033 FNsetupC
49042 FNsetupZ
49051 BIC R,R,#&FF
49060 ADD R,R,R1
49069 AND R1,R1,#flagS+flag5+flag3
49078 ORR F,F,R1
49087 FNfetch2(2,8)
49096 ]
49105 =""
49114 
49123 DEFFNsrl2(R)
49132 IF R=1 STOP
49141 [OPTp
49150 BIC F,F,#&FF
49159 MOVS R1,R2,RRX ; CLEAR ARM CARRY
49168 MOV R1,R,LSR#8
49177 MOVS R1,R1,RRX
49186 FNsetupC
49195 FNsetupZ
49204 BIC R,R,#&FF00
49213 ADD R,R,R1,LSL#8
49222 AND R1,R1,#(flagS+flag5+flag3)
49231 ORR F,F,R1
49240 FNfetch2(2,8)
49249 ]
49258 =""
49267 
49276 DEFFNsrlhl
49285 [OPTp
49294 BIC F,F,#&FF
49303 MOVS R1,R2,RRX ; CLEAR ARM CARRY
49312 ;LDRB R1,[R3,HL]
49321 FNldrb(1,3,HL)
49330 MOVS R1,R1,RRX
49339 FNsetupC
49348 FNsetupZ
49357 ;FNwp(HL)
49366 ;STRHSB R1,[R3,HL]
49375 FNstr(1,3,HL)
49384 AND R1,R1,#(flagS+flag5+flag3)
49393 ORR F,F,R1
49402 FNfetch2(2,15)
49411 ]
49420 =""
49429 
49438 DEFFNsrlixy
49447 IF reg%=IX THEN [OPTp : .DDCB%(&3E) : ] ELSE [OPTp : .FDCB%(&3E) : ]
49456 [OPTp
49465 BIC F,F,#&FF
49474 MOVS R0,R2,RRX ; CLEAR ARM CARRY
49483 LDRB R0,[R1,#1]
49492 ;ADD R0,R0,reg%
49501 FNaddixiy(0,reg%)
49510 ;LDRB R1,[R3,R0]
49519 FNldrb(1,3,0)
49528 MOVS R1,R1,RRX
49537 FNsetupC
49546 FNsetupZ
49555 ;FNwp(0)
49564 ;STRHSB R1,[R3,R0]
49573 FNstr(1,3,0)
49582 AND R1,R1,#(flagS+flag5+flag3)
49591 ORR F,F,R1
49600 FNfetch2(4,23)
49609 ]
49618 =""
49627 
49636 DEFFNsll(R%)
49645 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
49654 IF (r% AND 32) = 32 THEN =FNsllixy
49663 PROCsetaddr(&30,R%)
49672 IF (r% AND 64) = 64 THEN =FNsllhl
49681 IF (r% AND 128) = 128 THEN =FNsll2(reg%) ELSE =FNsll1(reg%)
49690 
49699 DEFFNsll1(R)
49708 [OPTp
49717 BIC F,F,#%11010011
49726 TST R,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
49735 MOVS R1,R,LSL#25 ; carry already done!
49744 ORR R1,R1,#1<<24:BIC F,F,#%1000000
49753 FNsetupS
49762 BIC R,R,#&FF
49771 ADD R,R,R1,LSR#24
49780 FNfetch2(2,8)
49789 ]
49798 =""
49807 
49816 DEFFNsll2(R)
49825 [OPTp
49834 MOV R1,R,LSR#8
49843 BIC F,F,#%11010011
49852 TST R1,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
49861 MOVS R1,R1,LSL#25 ; carry already done!
49870 ORR R1,R1,#1<<24:BIC F,F,#%1000000
49879 FNsetupS
49888 BIC R,R,#&FF00
49897 ADD R,R,R1,LSR#16
49906 FNfetch2(2,8)
49915 ]
49924 =""
49933 
49942 DEFFNsllhl
49951 [OPTp
49960 FNldrb(1,3,HL)
49969 BIC F,F,#%11010011
49978 TST R1,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
49987 MOVS R1,R1,LSL#25 ; carry already done!
49996 MOV R1,R1,LSR#24
50005 ORR R1,R1,#1:BIC F,F,#%1000000
50014 FNsetupS
50023 FNstr(1,3,HL)
50032 FNfetch2(2,15)
50041 ]
50050 =""
50059 
50068 DEFFNsllixy
50077 IF reg%=IX THEN [OPTp : .DDCB%(&30) : ] ELSE [OPTp : .FDCB%(&30) : ]
50086 [OPTp
50095 LDRB R0,[R1,#1]
50104 FNaddixiy(0,reg%)
50113 FNldrb(1,3,0)
50122 BIC F,F,#%11010010
50131 TST R1,#%10000000 : ORRNE F,F,#1 ; BICEQ not needed
50140 MOVS R1,R1,LSL#25 ; carry already done!
50149 MOV R1,R1,LSR#24
50158 ORR R1,R1,#1:BIC F,F,#%1000000
50167 FNsetupS
50176 FNstr(1,3,0)
50185 FNfetch2(4,23)
50194 ]
50203 =""
50212 
50221 DEFFNbit(B%,R%)
50230 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
50239 IF (r% AND 64) = 64 THEN =FNbithl(B%,R%)
50248 IF (r% AND 32) = 32 THEN =FNbitixy(B%,R%)
50257 mask%=2^B%
50266 IF (r% AND 128) = 128 THEN mask%=mask% << 8
50275 REMIF B%=7 AND R%=2 THEN pp=p+1:PRINT~mask% ELSE pp=p
50284 REM[OPTpp
50293 PROCsetaddr(&40+(B%<<3),R%)
50302 [OPTp
50311 TST reg%,#mask%
50320 BIC F,F,#%11101010
50329 ORREQ F,F,#%1010000 : ORRNE F,F,#%0010000
50338 ]
50347 IF (r% AND 128) = 128 THEN [OPTp:AND R0,reg%,#%10101000 << 8 : ORR F,F,R0,LSR#8:] ELSE [OPTp:AND R0,reg%,#%10101000 : ORR F,F,R0:]
50356 [OPTp
50365 FNfetch2(2,8)
50374 ]
50383 =""
50392 
50401 DEFFNbithl(B%,R%)
50410 mask%=2^B%
50419 [OPTp
50428 .CB%(&40+R%+(B% << 3))
50437 ;LDRB R0,[R3,HL]
50446 FNldrb(0,3,HL)
50455 TST R0,#mask%
50464 BIC F,F,#%11101010
50473 ORREQ F,F,#%01010000 : ORRNE F,F,#%00010000
50482 AND R0,R0,#%10101000 : ORR F,F,R0 ; make sentinel work
50491 FNfetch2(2,12)
50500 ]
50509 =""
50518 
50527 DEFFNbitixy(B%,R%)
50536 mask%=2^B%
50545 IF reg%=IX THEN [OPTp:.DDCB%(&46+B%*8):] ELSE [OPTp:.FDCB%(&46+B%*8):]
50554 [OPTp
50563 LDRB R1,[R1,#1]
50572 ;ADD R1,R1,reg%
50581 FNaddixiy(1,reg%)
50590 ;LDRB R0,[R3,R1]
50599 FNldrb(0,3,1)
50608 TST R0,#mask%
50617 BIC F,F,#%11101010
50626 ORREQ F,F,#%1010000 : ORRNE F,F,#%0010000
50635 AND R0,R0,#%10101000 : ORR F,F,R0 ; make sabre wulf work!
50644 FNfetch2(4,20)
50653 ]
50662 =""
50671 
50680 DEFFNres(B%,R%)
50689 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
50698 IF (r% AND 64) = 64 THEN =FNreshl(B%,R%)
50707 IF (r% AND 32) = 32 THEN =FNresixy(B%,R%)
50716 mask%=2^B%
50725 IF (r% AND 128) = 128 THEN mask%=mask% << 8
50734 PROCsetaddr(&80+(B%<<3),R%)
50743 [OPTp
50752 BIC reg%,reg%,#mask%
50761 FNfetch2(2,8)
50770 ]
50779 =""
50788 
50797 DEFFNreshl(B%,R%)
50806 mask%=2^B%
50815 [OPTp
50824 .CB%(&80+R%+(B% << 3))
50833 ;LDRB R0,[R3,HL]
50842 FNldrb(0,3,HL)
50851 BIC R0,R0,#mask%
50860 ;FNwp(HL)
50869 ;STRHSB R0,[R3,HL]
50878 FNstr(0,3,HL)
50887 FNfetch2(2,15)
50896 ]
50905 =""
50914 
50923 DEFFNresixy(B%,R%)
50932 mask%=2^B%
50941 IF reg%=IX THEN [OPTp:.DDCB%(&86+B%*8):] ELSE [OPTp:.FDCB%(&86+B%*8):]
50950 [OPTp
50959 LDRB R1,[R1,#1]
50968 ;ADD R1,R1,reg%
50977 FNaddixiy(1,reg%)
50986 ;LDRB R0,[R3,R1]
50995 FNldrb(0,3,1)
51004 BIC R0,R0,#mask%
51013 ;FNwp(1)
51022 ;STRHSB R0,[R3,R1]
51031 FNstr(0,3,1)
51040 FNfetch2(4,23)
51049 ]
51058 =""
51067 
51076 DEFFNset(B%,R%)
51085 r%=reg%(R%):reg%=r% AND 15:IF reg% ELSE =""
51094 IF (r% AND 64) = 64 THEN =FNsethl(B%,R%)
51103 IF (r% AND 32) = 32 THEN =FNsetixy(B%,R%)
51112 mask%=2^B%
51121 IF (r% AND 128) = 128 THEN mask%=mask% << 8
51130 PROCsetaddr(&C0+(B%<<3),R%)
51139 [OPTp
51148 ORR reg%,reg%,#mask%
51157 FNfetch2(2,8)
51166 ]
51175 =""
51184 
51193 DEFFNsethl(B%,R%)
51202 mask%=2^B%
51211 [OPTp
51220 .CB%(&C0+R%+(B% << 3))
51229 ;LDRB R0,[R3,HL]
51238 FNldrb(0,3,HL)
51247 ORR R0,R0,#mask%
51256 ;FNwp(HL)
51265 ;STRHSB R0,[R3,HL]
51274 FNstr(0,3,HL)
51283 FNfetch2(2,15)
51292 ]
51301 =""
51310 
51319 DEFFNsetixy(B%,R%)
51328 mask%=2^B%
51337 IF reg%=IX THEN [OPTp:.DDCB%(&C6+B%*8):] ELSE [OPTp:.FDCB%(&C6+B%*8):]
51346 [OPTp
51355 LDRB R1,[R1,#1]
51364 ;ADD R1,R1,reg%
51373 FNaddixiy(1,reg%)
51382 ;LDRB R0,[R3,R1]
51391 FNldrb(0,3,1)
51400 ORR R0,R0,#mask%
51409 ;FNwp(1)
51418 ;STRHSB R0,[R3,R1]
51427 FNstr(0,3,1)
51436 FNfetch2(4,23)
51445 ]
51454 =""
51463 
51472 DEFFNrst(N%)
51481 [OPTp
51490 ADD zpc,zpc,#1 << 16
51499 SUB zSP,zSP,#1 << 16
51508 MOV R1,zpc,LSR#24
51517 FNstr2(1,3,zSP)
51526 SUB zSP,zSP,#1 << 16
51535 MOV R1,zpc,LSR#16
51544 FNstr2(1,3,zSP)
51553 
51562 ;FNpush(zpc)
51571 MOV zpc,#N% << 16
51580 FNfetch2(0,11)
51589 ]=""
51598 
51607 DEFFNpush(R,F%,T%)
51616 [OPTp
51625 SUB zSP,zSP,#1 << 16
51634 MOV R1,R,LSR#8
51643 FNstr2(1,3,zSP)
51652 SUB zSP,zSP,#1 << 16
51661 FNstr2(R,3,zSP)
51670 FNfetch2(F%,T%)
51679 ]=""
51688 
51697 DEFFNpushpc
51706 [OPTp
51715 SUB zSP,zSP,#1 << 16
51724 MOV R0,zpc,LSR#24
51733 FNstr2(0,3,zSP)
51742 SUB zSP,zSP,#1 << 16
51751 MOV R0,zpc,LSR#16
51760 FNstr2(0,3,zSP)
51769 ]=""
51778 
51787 DEFFNpoppc
51796 [OPTp
51805 FNldrb2(0,3,zSP)
51814 ADD zSP,zSP,#1 << 16
51823 FNldrb(1,3,zSP)
51832 ADD zSP,zSP,#1 << 16
51841 MOV zpc,R0,LSL#16
51850 ADD zpc,zpc,R1,LSL#24
51859 ]=""
51868 
51877 DEFFNcall
51886 [OPTp
51895 FNpushpc
51904 SUB R0,zpc,#2<<16 : FNldrb2(1,3,0)
51913 SUB R0,zpc,#1<<16 : FNldrb2(0,3,0)
51922 MOV zpc,R1,LSL#16
51931 ADD zpc,zpc,R0,LSL#24
51940 FNfetch2(0,17)
51949 ]=""
51958 
51967 DEFFNpop(R,F%,T%)
51976 [OPTp
51985 FNldrb2(R,3,zSP)
51994 ADD zSP,zSP,#1 << 16
52003 FNldrb2(1,3,zSP)
52012 ADD zSP,zSP,#1 << 16
52021 ADD R,R,R1,LSL#8
52030 FNfetch2(F%,T%)
52039 ]=""
52048 
52057 DEFFNor1(R,F%,T%)
52066 IF debug%>024 THEN
52075 [OPT p
52084 ORR A,A,R:AND A,A,#&FF:FNpzs(A,0)
52093 FNfetch2(F%,T%)
52102 ]
52111 OTHERWISE
52120 [OPTp
52129 AND R0,R,#&FF
52138 ORRS A,A,R0
52147 BIC F,F,#%11010011     ; H,N,C
52156 ORREQ F,F,#%1000000
52165 ANDS R0,A,#%10000000
52174 ORRNE F,F,R0
52183 ;FNsetupSZ  ; PARITY NOT DONE
52192 FNfetch2(F%,T%)
52201 
52210 ]
52219 ENDIF
52228 =""
52237 
52246 DEFFNor2(R,F%,T%)
52255 IF debug%>025 THEN
52264 [OPTp
52273 ORR A,A,R,LSR #8:FNpzs(A,0)
52282 FNfetch2(F%,T%)
52291 ]
52300 OTHERWISE
52309 [OPTp
52318 ORRS A,A,R,LSR#8
52327 BIC F,F,#%11010011     ; H,N,C
52336 ORREQ F,F,#%1000000
52345 ANDS R0,A,#%10000000
52354 ORRNE F,F,R0
52363 ;FNsetupSZ  ; PARITY NOT DONE
52372 FNfetch2(F%,T%)
52381 
52390 ]
52399 ENDIF
52408 =""
52417 
52426 DEFFNxor1(R,F%,T%)
52435 IF debug%>026 THEN
52444 [OPTp
52453 EOR A,A,R:AND A,A,#&FF:FNpzs(A,0)
52462 FNfetch2(F%,T%)
52471 ]
52480 OTHERWISE
52489 [OPTp
52498 AND R0,R,#&FF
52507 EORS A,A,R0
52516 BIC F,F,#%11010011     ; H,N,C
52525 ORREQ F,F,#%1000000
52534 ANDS R0,A,#%10000000
52543 ORRNE F,F,R0
52552 ;FNsetupSZ ; PARITY NOT DONE
52561 FNfetch2(F%,T%)
52570 ]
52579 ENDIF
52588 =""
52597 
52606 DEFFNxor2(R,F%,T%)
52615 IF debug%>027 THEN
52624 [OPTp
52633 EOR A,A,R,LSR #8:FNpzs(A,0)
52642 FNfetch2(F%,T%)
52651 ]
52660 OTHERWISE
52669 [OPTp
52678 EORS A,A,R,LSR#8
52687 BIC F,F,#%11010011     ; H,N,C
52696 ;FNsetupSZ ; PARITY NOT DONE
52705 ORREQ F,F,#%1000000
52714 ANDS R0,A,#%10000000
52723 ORRNE F,F,R0
52732 FNfetch2(F%,T%)
52741 
52750 ]
52759 ENDIF
52768 =""
52777 
52786 DEFFNand1(R,F%,T%)
52795 IF debug%>028 THEN
52804 [OPTp
52813 AND A,A,R:AND A,A,#&FF:FNpzs(A,0):ORR F,F,#flagH
52822 FNfetch2(F%,T%)
52831 ]
52840 OTHERWISE
52849 [OPTp
52858 ANDS A,A,R
52867 ;ORR F,F,#%10000           ; H
52876 BIC F,F,#%11000111        ; N,C
52885 ;FNsetupSZ ; PARITY NOT DONE
52894 ORREQ F,F,#%1010000
52903 ORRNE F,F,#%0010000
52912 ANDS R0,A,#%10000000 ; will be %10101000 for undoc'd flags
52921 ORRNE F,F,R0
52930 EOR R0,A,A,LSR#4
52939 EOR R0,R0,R0,LSR#2
52948 EOR R0,R0,R0,LSR#1
52957 AND R0,R0,#%1
52966 EOR R0,R0,#%1
52975 ADD F,F,R0,LSL#2 ; parity for Green Beret
52984 FNfetch2(F%,T%)
52993 
53002 ]
53011 ENDIF
53020 =""
53029 
53038 DEFFNand2(R,F%,T%)
53047 IF debug%>029 THEN
53056 [OPTp
53065 AND A,A,R,LSR #8:FNpzs(A,0):ORR F,F,#flagH
53074 FNfetch2(F%,T%)
53083 ]
53092 OTHERWISE
53101 [OPTp
53110 ANDS A,A,R,LSR#8
53119 ;ORR F,F,#%10000           ; H
53128 BIC F,F,#%11000011        ; N,C
53137 ;FNsetupSZ ; PARITY NOT DONE
53146 ORREQ F,F,#%1010000
53155 ORRNE F,F,#%0010000
53164 ANDS R0,A,#%10000000 ; will be %10101000 for undoc'd flags
53173 ORRNE F,F,R0
53182 FNfetch2(F%,T%)
53191 
53200 ]
53209 ENDIF
53218 =""
53227 
53236 DEFFNadc1(R,F%,T%)
53245 IF debug%>030 THEN
53254 [OPT p
53263 TST F,F,RRX
53272 AND R1,R,#&FF:ADC R14,A,R1:TST R14,#&100
53281 AND R14,R14,#255:FNzs(14,0):ORRNE F,F,#flagC
53290 EOR R0,A,R1:MVN R0,R0:EOR R1,R14,R1
53299 AND R0,R1,R0:TST R0,#128:ORRNE F,F,#flagV
53308 EOR R1,R1,A:TST R1,#16:ORRNE F,F,#flagH
53317 MOV A,R14
53326 FNfetch2(F%,T%)
53335 ]
53344 OTHERWISE
53353 [OPTp
53362 MOVS R1,F,RRX ; move Z80 carry into ARM carry
53371 MVNCS R1,#0
53380 BICCS R1,R1,#&F0000000
53389 ADD R1,R1,A,LSL#28
53398 ADCS R1,R1,R,LSL#28
53407 FNsetupH
53416 MOVS R1,F,RRX ; move Z80 carry into ARM carry
53425 MOV A,A,LSL#24
53434 ORRCS A,A,#&FF0000
53443 ORRCS A,A,#&FF00
53452 ORRCS A,A,#&FF
53461 ADCS A,A,R,LSL#24
53470 MOV A,A,LSR#24
53479 FNsetupCZSVN(0)
53488 FNfetch2(F%,T%)
53497 
53506 ]
53515 ENDIF
53524 =""
53533 
53542 DEFFNadc2(R,F%,T%)
53551 IF debug%>031 THEN
53560 [OPT p
53569 TST F,F,RRX
53578 ADC R14,A,R,LSR #8:TST R14,#&100
53587 AND R14,R14,#255:FNzs(14,0):ORRNE F,F,#flagC
53596 EOR R1,R14,R,LSR #8:EOR R0,A,R,LSR #8:MVN R0,R0
53605 AND R0,R1,R0:TST R0,#128:ORRNE F,F,#flagV
53614 EOR R1,R1,A:TST R1,#16:ORRNE F,F,#flagH
53623 MOV A,R14
53632 FNfetch2(F%,T%)
53641 ]
53650 OTHERWISE
53659 [OPTp
53668 MOVS R1,F,RRX ; move Z80 carry into ARM carry
53677 MOV R1,R,LSL#20
53686 ORRCS R1,R1,#&FF
53695 ORRCS R1,R1,#&FF00
53704 ORRCS R1,R1,#&FF0000
53713 ORRCS R1,R1,#&F000000
53722 ADCS R1,R1,A,LSL#24
53731 FNsetupH
53740 MOVS R1,F,RRX ; move Z80 carry into ARM carry
53749 MOV A,A,LSL#24
53758 ORRCS A,A,#&FF0000
53767 ORRCS A,A,#&FF00
53776 ORRCS A,A,#&FF
53785 MOV R1,R,LSR#8
53794 ADCS A,A,R1,LSL#24
53803 MOV A,A,LSR#24
53812 FNsetupCZSVN(0)
53821 
53830 FNfetch2(F%,T%)
53839 
53848 ]
53857 ENDIF
53866 =""
53875 
53884 DEFFNcp1(R,F%,T%)
53893 IF debug%>032 THEN
53902 [OPT p
53911 AND R1,R,#&FF:SUBS R14,A,R1
53920 AND R14,R14,#&FF:FNzs(14,1):ORRMI F,F,#flagC
53929 ORR F,F,#flagN
53938 EOR R0,A,R1:EOR R1,A,R14
53947 AND R1,R0,R1:TST R1,#&80:ORRNE F,F,#flagV
53956 EOR R0,R0,R14:TST R0,#16:ORRNE F,F,#flagH
53965 FNfetch2(F%,T%)
53974 ]
53983 OTHERWISE
53992 [OPTp
54001 MOV R1,A,LSL#28
54010 SUBS R1,R1,R,LSL#28
54019 FNrev_setupH
54028 MOV R1,A,LSL#24
54037 SUBS R1,R1,R,LSL#24
54046 FNrev_setupCZSVN(1)
54055 FNfetch2(F%,T%)
54064 
54073 ]
54082 ENDIF
54091 =""
54100 
54109 DEFFNcp2(R,F%,T%)
54118 IF debug%>033 THEN
54127 [OPT p
54136 SUBS R14,A,R,LSR #8
54145 AND R14,R14,#&FF:FNzs(14,1):ORRMI F,F,#flagC
54154 ORR F,F,#flagN
54163 EOR R0,A,R,LSR #8:EOR R1,A,R14
54172 AND R1,R0,R1:TST R1,#&80:ORRNE F,F,#flagV
54181 EOR R0,R0,R14:TST R0,#16:ORRNE F,F,#flagH
54190 FNfetch2(F%,T%)
54199 ]
54208 OTHERWISE
54217 [OPTp
54226 MOV R14,R,LSR#8
54235 MOV R1,A,LSL#28
54244 SUBS R1,R1,R14,LSL#28
54253 FNrev_setupH
54262 MOV R1,A,LSL#24
54271 SUBS R1,R1,R14,LSL#24
54280 FNrev_setupCZSVN(1)
54289 ; what the hell's this? EOR F,F,#%10001
54298 FNfetch2(F%,T%)
54307 ]
54316 ENDIF
54325 =""
54334 
54343 DEFFNsub1(R,F%,T%)
54352 IF debug%>034 THEN
54361 [OPT p
54370 AND R1,R,#&FF:SUBS R14,A,R1
54379 AND R14,R14,#&FF:FNzs(14,1):ORRMI F,F,#flagC
54388 ORR F,F,#flagN
54397 EOR R0,A,R1:EOR R1,A,R14
54406 AND R1,R0,R1:TST R1,#&80:ORRNE F,F,#flagV
54415 EOR R0,R0,R14:TST R0,#16:ORRNE F,F,#flagH
54424 MOV A,R14
54433 FNfetch2(F%,T%)
54442 ]
54451 OTHERWISE
54460 [OPTp
54469 MOV R1,A,LSL#28
54478 SUBS R1,R1,R,LSL#28
54487 FNrev_setupH
54496 MOV A,A,LSL#24
54505 SUBS A,A,R,LSL#24
54514 FNrev_setupCZSVN(1)
54523 MOV A,A,LSR#24
54532 FNfetch2(F%,T%)
54541 
54550 ]
54559 ENDIF
54568 =""
54577 
54586 DEFFNsub2(R,F%,T%)
54595 IF debug%>035 THEN
54604 [OPT p
54613 SUBS R14,A,R,LSR #8
54622 AND R14,R14,#&FF:FNzs(14,1):ORRMI F,F,#flagC
54631 ORR F,F,#flagN
54640 EOR R0,A,R,LSR #8:EOR R1,A,R14
54649 AND R1,R0,R1:TST R1,#&80:ORRNE F,F,#flagV
54658 EOR R0,R0,R14:TST R0,#16:ORRNE F,F,#flagH
54667 MOV A,R14
54676 FNfetch2(F%,T%)
54685 ]
54694 OTHERWISE
54703 [OPTp
54712 MOV R14,R,LSR#8
54721 MOV R1,A,LSL#28
54730 SUBS R1,R1,R14,LSL#28
54739 FNrev_setupH
54748 MOV A,A,LSL#24
54757 SUBS A,A,R14,LSL#24
54766 FNrev_setupCZSVN(1)
54775 MOV A,A,LSR#24
54784 FNfetch2(F%,T%)
54793 
54802 ]
54811 ENDIF
54820 =""
54829 
54838 DEFFNsbc1(R,F%,T%)
54847 IF debug%>036 THEN
54856 [OPT p
54865 EOR R14,F,#1:TST R14,R14,RRX
54874 AND R1,R,#&FF:SBCS R14,A,R1
54883 AND R14,R14,#&FF:FNzs(14,1):ORRMI F,F,#flagC
54892 ORR F,F,#flagN
54901 EOR R0,A,R1:EOR R1,A,R14
54910 AND R1,R0,R1:TST R1,#&80:ORRNE F,F,#flagV
54919 EOR R0,R0,R14:TST R0,#16:ORRNE F,F,#flagH
54928 MOV A,R14
54937 FNfetch2(F%,T%)
54946 ]
54955 OTHERWISE
54964 [OPTp
54973 EOR R1,F,#1
54982 MOVS R1,R1,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
54991 
55000 MOV R1,A,LSL#28
55009 SBCS R1,R1,R,LSL#28
55018 FNrev_setupH
55027 EOR R1,F,#1
55036 MOVS R1,R1,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
55045 MOV A,A,LSL#24
55054 SBCS A,A,R,LSL#24
55063 FNrev_setupCZSVN(1)
55072 MOVS A,A,LSR#24
55081 FNsetupZ
55090 FNfetch2(F%,T%)
55099 ]
55108 ENDIF
55117 =""
55126 
55135 DEFFNsbc2(R,F%,T%)
55144 IF debug%>037 THEN
55153 [OPT p
55162 EOR R14,F,#1:TST R14,R14,RRX
55171 SBCS R14,A,R,LSR #8
55180 AND R14,R14,#&FF:FNzs(14,1):ORRMI F,F,#flagC
55189 ORR F,F,#flagN
55198 EOR R0,A,R,LSR #8:EOR R1,A,R14
55207 AND R1,R0,R1:TST R1,#&80:ORRNE F,F,#flagV
55216 EOR R0,R0,R14:TST R0,#16:ORRNE F,F,#flagH
55225 MOV A,R14
55234 FNfetch2(F%,T%)
55243 ]
55252 OTHERWISE
55261 [OPTp
55270 MOV R14,R,LSR#8
55279 EOR R1,F,#1
55288 MOVS R1,R1,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
55297 MOV R1,A,LSL#28
55306 SBCS R1,R1,R14,LSL#28
55315 FNrev_setupH
55324 EOR R1,F,#1
55333 MOVS R1,R1,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
55342 MOV A,A,LSL#24
55351 SBCS A,A,R14,LSL#24
55360 FNrev_setupCZSVN(1)
55369 MOVS A,A,LSR#24
55378 FNsetupZ
55387 FNfetch2(F%,T%)
55396 
55405 ]
55414 ENDIF
55423 =""
55432 
55441 DEFFNSBC_HL_(R)
55450 IF emuH THEN
55459 [OPTp
55468 EOR R0,F,#1
55477 MOVS R0,R0,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
55486 MOV R0,R,LSL#20
55495 SBCS R0,R0,HL,LSL#20
55504 FNrev_setupH
55513 ]
55522 ENDIF
55531 [OPTp
55540 EOR R0,F,#1
55549 MOVS R0,R0,RRX ; MOVE NOTZ80 CARRY INTO ARM CARRY
55558 MOV HL,HL,LSL#16
55567 SBCS HL,HL,R,LSL#16
55576 FNrev_setupCZSVN(1)
55585 MOVS HL,HL,LSR#16
55594 FNsetupZ
55603 
55612 FNfetch2(2,15)
55621 ]=""
55630 
55639 DEFFNadd1(R,F%,T%)
55648 IF debug%>038 THEN
55657 [OPT p
55666 AND R1,R,#&FF:ADD R14,A,R1:TST R14,#&100
55675 AND R14,R14,#255:FNzs(14,0):ORRNE F,F,#flagC
55684 EOR R0,A,R1:MVN R0,R0:EOR R1,R14,R1
55693 AND R0,R1,R0:TST R0,#128:ORRNE F,F,#flagV
55702 EOR R1,R1,A:TST R1,#16:ORRNE F,F,#flagH
55711 MOV A,R14
55720 FNfetch2(F%,T%)
55729 ]
55738 OTHERWISE
55747 [OPTp
55756 MOV R14,A,LSL#28
55765 ADDS R14,R14,R,LSL#28
55774 FNsetupH
55783 MOV A,A,LSL#24
55792 ADDS A,A,R,LSL#24
55801 FNsetupCZSVN(0)
55810 MOV A,A,LSR#24
55819 BIC F,F,#%00101000:AND R0,A,#%00101000:ADD F,F,R0 ; GHOSTS'N'GOBLINS?
55828 FNfetch2(F%,T%)
55837 ]
55846 ENDIF
55855 =""
55864 
55873 DEFFNadd2(R,F%,T%)
55882 IF debug%>039 THEN
55891 [OPT p
55900 ADD R14,A,R,LSR #8:TST R14,#&100
55909 AND R14,R14,#255:FNzs(14,0):ORRNE F,F,#flagC
55918 EOR R0,A,R,LSR #8:MVN R0,R0:EOR R1,R14,R,LSR #8
55927 AND R0,R1,R0:TST R0,#128:ORRNE F,F,#flagV
55936 EOR R1,R1,A:TST R1,#16:ORRNE F,F,#flagH
55945 MOV A,R14
55954 FNfetch2(F%,T%)
55963 ]
55972 OTHERWISE
55981 [OPTp
55990 MOV R14,A,LSL#28
55999 ADDS R14,R14,R,LSL#20
56008 FNsetupH
56017 ]
56026 ENDIF
56035 [OPTp
56044 MOV A,A,LSL#24
56053 AND R0,R,#&FF00
56062 ADDS A,A,R0,LSL#16
56071 FNsetupCZSVN(0)
56080 MOV A,A,LSR#24
56089 FNfetch2(F%,T%)
56098 ]
56107 ENDIF
56116 =""
56125 
56134 DEFFNADD_HL_(R)=FNADDW(HL,R)
56143 DEFFNADD_IX_(R)=FNADDW(IX,R)
56152 DEFFNADD_IY_(R)=FNADDW(IY,R)
56161 
56170 DEFFNADDW(D,R)
56179 [OPT p
56188 ADD R1,D,R
56197 BIC F,F,#flagH+flagN+flagC
56206 EOR R0,D,R:EOR R0,R0,R1:TST R0,#&1000:ORRNE F,F,#flagH
56215 TST R1,#&10000:ORRNE F,F,#flagC
56224 BIC D,R1,#&10000
56233 ]IF D=HL THEN [OPT p:FNfetch2(1,11):] ELSE [OPT p:FNfetch2(2,15):]
56242 =""
56251 
56260 DEFFNADC_HL_(R)=FNADCW(HL,R)
56269 DEFFNADC_IX_(R)=FNADCW(IX,R)
56278 DEFFNADC_IY_(R)=FNADCW(IY,R)
56287 
56296 DEFFNADCW(D,R)
56305 [OPTp
56314 TST F,F,RRX:;ADC R1,D,R
56323 BIC F,F,#&FF-flagC; ALL FLAGS except C
56332 
56341 BIC R0,D,#&F000 : BIC R1,R,#&F000 : ADC R0,R0,R1 : TST R0,#&1000 : ORRNE F,F,#flagH
56350 TST F,F,RRX:BIC F,F,#flagC
56359 MOV R0,D,LSL#16:MOV R14,R,LSL#16:ORR R0,R0,#&FF:ORR R0,R0,#&FF00:ADCS R1,R0,R14
56368 ORRVS F,F,#flagV
56377 ORRCS F,F,#flagC:ORRMI F,F,#flagS
56386 MOVS D,R1,LSR#16
56395 ORREQ F,F,#flagZ
56404 
56413 ;EOR R14,D,R:;EOR R0,R14,R1:;TST R0,#&1000:;ORRNE F,F,#flagH
56422 ;MVN R0,R14:;EOR R14,D,R1:;AND R0,R0,R14:;TST R0,#&8000:;ORRNE F,F,#flagV
56431 ;TST R1,#&10000:;ORRNE F,F,#flagC
56440 ;BICS D,R1,#&FF0000:;ORREQ F,F,#flagZ
56449 ;TST D,#flagS<<8:;ORRNE F,F,#flagS
56458 TST D,#flag3<<8:ORRNE F,F,#flag3
56467 TST D,#flag5<<8:ORRNE F,F,#flag5
56476 ;]IF D=HL THEN [OPT p:;FNfetch2(1,11):;] ELSE [OPT p:
56485 FNfetch2(2,15):]
56494 =""
56503 
56512 DEFFNinc1(R,F%)
56521 IF debug%>040 THEN
56530 [OPTp
56539 ;TST R,#15 ; MRB 30/1/99
56548 ]
56557 IF R=A THEN
56566  [OPT p:ADD R,R,#1:AND R,R,#&FF:FNzs_c(R,0):]
56575 OTHERWISE
56584  [OPT p
56593  ADD R0,R,#1:AND R0,R0,#&FF:FNzs_c(0,0)
56602  AND R,R,#&FF00:ORR R,R,R0
56611  ]R=0
56620 ENDIF
56629 [OPT p
56638 TST R,#15 ; removed MRB 30/1/99
56647 ORREQ F,F,#flagH
56656 TEQ R,#128:ORREQ F,F,#flagV
56665 FNfetch2(F%,4)
56674 ]
56683 OTHERWISE
56692 [OPTp
56701 MOV R0,R,LSL#24
56710 ADDS R0,R0,#&01000000
56719 FNsetupZSVN(0)
56728 TST R,#%1111:ORREQ F,F,#%10000:BICNE F,F,#%10000
56737 ]
56746 IF R=A THEN [OPT p:MOV R,R0,LSR#24:] ELSE [OPT p:AND R,R,#&FF00:ADD R,R,R0,LSR#24:]
56755 [OPT p
56764 FNfetch2(F%,4)
56773 
56782 ]
56791 ENDIF
56800 =""
56809 
56818 DEFFNinc2(R,F%)
56827 IF debug%>041 THEN
56836 [OPT p
56845 MOV R0,R,LSR #8
56854 ;TST R0,#15 ; MRB 30/1/99
56863 ADD R0,R0,#1:AND R0,R0,#&FF:FNzs_c(0,0)
56872 TST R0,#15 ; removed MRB 30/1/99
56881 ORREQ F,F,#flagH ; MRB 30/1/99
56890 TEQ R0,#128:ORREQ F,F,#flagV
56899 AND R,R,#&FF:ORR R,R,R0,LSL #8:FNfetch2(F%,4)
56908 ]
56917 OTHERWISE
56926 [OPTp
56935 MOV R0,R,LSL#16
56944 ADDS R0,R0,#&01000000
56953 FNsetupSVN(0) ; zero Z
56962 TST R,#&F00:ORREQ F,F,#%10000:BICNE F,F,#%10000
56971 MOV R,R0,LSR#16
56980 MOVS R0,R,LSR#8 : ORREQ F,F,#%1000000 ; Z
56989 FNfetch2(F%,4)
56998 ]
57007 ENDIF
57016 =""
57025 
57034 DEFFNdec1(R,F%,T%)
57043 IF debug%>042 THEN
57052 IF R=A THEN
57061  [OPT p
57070  ANDS R14,R,#%1111 ; MRB 23/1/99
57079  SUB R,R,#1:AND R,R,#&FF:FNzs_c(R,1):]
57088 OTHERWISE
57097  [OPT p
57106  ANDS R14,R,#%1111 ; MRB 23/1/99
57115  SUB R0,R,#1:AND R0,R0,#&FF:FNzs_c(0,1)
57124  AND R,R,#&FF00:ORR R,R,R0
57133  ]R=0
57142 ENDIF
57151 [OPT p
57160 ORREQ F,F,#flagH  ; MRB 23/1/99
57169 TEQ R,#127:ORREQ F,F,#flagV
57178 ; line removed MRB 23/1/99
57187 FNfetch2(F%,T%)
57196 ]
57205 OTHERWISE
57214 [OPTp
57223 TST R,#%1111:ORREQ F,F,#flagH:BICNE F,F,#flagH
57232 MOV R0,R,LSL#24
57241 SUBS R0,R0,#&01000000
57250 FNsetupZSVN(1)
57259 ]
57268 IF R=A THEN [OPT p:MOV R,R0,LSR#24:] ELSE [OPT p:AND R,R,#&FF00:ADD R,R,R0,LSR#24:]
57277 [OPT p
57286 ;MOV HL,#0
57295 FNfetch2(F%,T%)
57304 
57313 ]
57322 ENDIF
57331 =""
57340 
57349 DEFFNdec2(R,F%,T%)
57358 IF debug%>043 THEN
57367 [OPT p
57376 MOV R0,R,LSR #8
57385 TST R0,#%1111
57394 SUB R0,R0,#1:AND R0,R0,#&FF:FNzs_c(0,1)
57403 ORREQ F,F,#flagH
57412 TEQ R0,#127:ORREQ F,F,#flagV
57421 AND R,R,#&FF:ORR R,R,R0,LSL #8
57430 ;BIC F,F,  #%00101000
57439 ;AND R0,R0,#%00101000 : ;ORR F,F,R0 ; MRB 15/3/99
57448 ;SWINV &100+ASC"K"
57457 FNfetch2(F%,T%)
57466 ]
57475 OTHERWISE
57484 [OPTp
57493 TST R,#&F00:ORREQ F,F,#%10000:BICNE F,F,#%10000
57502 MOV R0,R,LSL#16
57511 SUBS R0,R0,#&01000000
57520 FNsetupSVN(1) ; Z TO 1
57529 MOV R,R0,LSR#16
57538 MOVS R0,R,LSR#8 : BICNE F,F,#%1000000 ; Z
57547 AND R0,R0,#(flag3 OR flag5)
57556 BIC F,F,#(flag3 OR flag5)
57565 ORR F,F,R0
57574 FNfetch2(F%,T%)
57583 
57592 ]
57601 ENDIF
57610 =""
57619 
57628 DEFFNdaa
57637 [OPTp:BIC F,F,#%10010:ANDS A,A,#&FF:FNsetupSZ:FNfetch2(1,4):]=""
57646 
57655 DEFFNsetupC
57664 [OPTp:BICCC  F,F,#%1 : ORRCS  F,F,#%1:]=""
57673 
57682 DEFFNsetupH
57691 [OPTp:BICCC  F,F,#%10000 : ORRCS  F,F,#%10000:]=""
57700 
57709 DEFFNrev_setupH REM reverses H
57718 [OPTp:BICCS  F,F,#%10000 : ORRCC  F,F,#%10000:]=""
57727 
57736 DEFFNsetupZ
57745 [OPTp:BICNE  F,F,#%1000000 : ORREQ  F,F,#%1000000:]=""
57754 
57763 DEFFNsetupS
57772 [OPTp:BICPL  F,F,#%10000000 : ORRMI  F,F,#%10000000:]=""
57781 
57790 DEFFNsetupV
57799 [OPTp:BICVC F,F,#%100 : ORRVS F,F,#%100:]=""
57808 
57817 DEFFNN(N)
57826 IF N=0 THEN [OPTp:BIC F,F,#%10:] ELSE [OPTp:ORR F,F,#%10:]
57835 =""
57844 
57853 DEFFNsetupZSVN(N)
57862 IF N=0 THEN [OPTp:BIC F,F,#%11000110 : ORRMI F,F,#%10000000 : ORREQ F,F,#%1000000 : ORRVS F,F,#%100:] ELSE [OPTp:ORR F,F,#%11000110 : BICPL F,F,#%10000000 : BICNE F,F,#%1000000 : BICVC F,F,#%100:]
57871 =""
57880 
57889 DEFFNsetupSVN(N) : REM Z -> N TOO
57898 IF N=0 THEN [OPTp:BIC F,F,#%11000110 : ORRMI F,F,#%10000000 : ORRVS F,F,#%100:] ELSE [OPTp:ORR F,F,#%11000110 : BICPL F,F,#%10000000 : BICVC F,F,#%100:]
57907 =""
57916 
57925 DEFFNsetupCZSVN(N)
57934 IF N=0 THEN [OPTp:BIC F,F,#%11000111 : ORRMI F,F,#%10000000 : ORREQ F,F,#%1000000 : ORRVS F,F,#%100:ORRCS F,F,#%1:] ELSE [OPTp:ORR F,F,#%11000110 : BICPL F,F,#%10000000 : BICNE F,F,#%1000000 : BICVC F,F,#%100:BICCC F,F,#%1:]
57943 =""
57952 
57961 DEFFNrev_setupCZSVN(N) REM reverses C
57970 IF N=0 THEN [OPTp:BIC F,F,#%11000111 : ORRMI F,F,#%10000000 : ORREQ F,F,#%1000000 : ORRVS F,F,#%100:ORRCC F,F,#%1:] ELSE [OPTp:ORR F,F,#%11000111 : BICPL F,F,#%10000000 : BICNE F,F,#%1000000 : BICVC F,F,#%100:BICCS F,F,#%1:]
57979 =""
57988 
57997 DEFFNsetupCSVN(N)
58006 IF N=0 THEN [OPTp:BIC F,F,#%10000111 : ORRMI F,F,#%10000000 : ORRVS F,F,#%100:ORRCS F,F,#%1:] ELSE [OPTp:ORR F,F,#%10000110 : BICPL F,F,#%10000000 : BICVC F,F,#%100:BICCC F,F,#%1:]
58015 =""
58024 
58033 DEFFNsetupSZ
58042 [OPTp ; BITS 6,7 NOT CLEARED HERE
58051 ORRMI F,F,#%10000000 : ORREQ F,F,#%1000000:]=""
58060 
58069 DEFFNandFFFF(R)
58078 [OPTp:MOV R,R,LSL#16 : MOV R,R,LSR#16:]=""
58087 
58096 DEFFNandFFFF0000(R)
58105 [OPTp:MOV R,R,LSR#16 : MOV R,R,LSL#16:]=""
58114 
58123 DEFFNequd(N%,A%)
58132 LOCAL I%:FOR I%=1 TO N%:[OPTp : & A% : ]:NEXT:=""
58141 
58150 DEFFNprint(R)
58159 LOCALI%
58168 [OPTp:MOV R1,R,ROR#28:]
58177 FORI%=0 TO 7
58186 [OPT p
58195 ;AND R0,R1,#&F
58204 ;CMP R0,#10
58213 ;ADDGE R0,R0,#7
58222 ;ADD R0,R0,#48
58231 ;SWI "OS_WriteC"
58240 ;MOV R1,R1,ROR#28
58249 ]:NEXT
58258 [OPTp
58267 ;SWI &120
58276 ]=""
58285 
58294 DEFFNprint4(R)
58303 LOCALI%
58312 [OPTp:MOV R1,R,ROR#28:]
58321 FORI%=0 TO 7
58330 [OPT p
58339 ;AND R0,R1,#&F
58348 ;CMP R0,#10
58357 ;ADDGE R0,R0,#7
58366 ;ADD R0,R0,#48
58375 ;SWI "OS_WriteC"
58384 ;MOV R1,R1,ROR#28
58393 ]NEXT
58402 [OPTp
58411 ;SWI &120
58420 ]=""
58429 
58438 DEFFNprint2(R)
58447 LOCALI%
58456 [OPTp:MOV R1,R,ROR#4:]
58465 FORI%=0 TO 1
58474 [OPT p
58483 ;AND R0,R1,#&F
58492 ;CMP R0,#10
58501 ;ADDGE R0,R0,#7
58510 ;ADD R0,R0,#48
58519 ;SWI "OS_WriteC"
58528 ;MOV R1,R1,ROR#28
58537 ]NEXT
58546 [OPTp
58555 ;SWI &10A
58564 ]=""
58573 
58582 DEFFNprints(A$)
58591 [OPTp
58600 ;SWI "OS_WriteS"
58609 ;EQUS A$
58618 ;EQUB 10
58627 ;EQUB 13
58636 ;EQUB 0
58645 ;ALIGN
58654 ]=""
58663 
58672 DEFPROCscreen
58681 MODE 9 : OFF
58690 COLOUR 0,0,0,0
58699 COLOUR 1,0,0,191
58708 COLOUR 2,255,0,0
58717 COLOUR 3,191,0,191
58726 COLOUR 4,0,191,0
58735 COLOUR 5,0,191,191
58744 COLOUR 6,191,191,0
58753 COLOUR 7,191,191,191
58762 
58771 COLOUR 8,0
58780 COLOUR 9,4
58789 COLOUR 10,1
58798 COLOUR 11,5
58807 COLOUR 12,2
58816 COLOUR 13,6
58825 COLOUR 14,3
58834 COLOUR 15,7
58843 ENDPROC
58852 
58861 
58870 DEFFNaddixiy(R,I)
58879 [OPTp
58888 CMP R,#127 ; ????????????????????
58897 ADD R,I,R
58906 SUBHI R,R,#&100
58915 MOV R,R,LSL#16 : MOV R,R,LSR#16
58924 ]=0
58933 
58942 DEFFNshowregs
58951 [OPTp:BL showregs:]=""
58960 
58969 ;DEFFNshowregs
58978 [OPTp
58987 MOV R1,zpc
58996 SWI "Z80_ShowRegs"
59005 MOV R1,IX
59014 SWI "Z80_ShowIX"
59023 MOV R1,IY
59032 SWI "Z80_ShowIYSP"
59041 ;SWI &120
59050 ;MOV R1,zpc
59059 ;SWI "Z80_Showloc"
59068 SWI &10A
59077 ]=""
59086 
59095 DEFFNfetch
59104 IF spool THEN Q$=FNshowregs
59113 [OPTp
59122 MOV R14,#0:B tape_fetch
59131 ]=0
59140 
59149 DEFFNfetch2(N%,T%)
59158 IF N%<>0 THEN [OPTp:ADD zpc,zpc,#(N% << 16):]
59167 IF spool THEN Q$=FNshowregs
59176 IF emuR THEN [OPTp:ADD RI,RI,#1 << 25:]
59185 [OPTp
59194 MOV R14,#T%:B tape_fetch
59203 ]=0
59212 
59221 DEFFNpzs_c(R,N)
59230 [OPT p
59239 ;ADD R3,PC,#(pzs_table-P%-8) AND &00FF
59248 ;ADD R3,R3,#(pzs_table-P%-8) AND &FF00
59257 FNADR(3,pzs_table)
59266 LDRB R3,[R3,R]:BIC F,F,#&FE:ORR F,F,R3
59275 ]IF N=1 THEN [OPTp:ORR F,F,#flagN:]
59284 IF MEM$="48" THEN =FNsetR3
59293 =0
59302 
59311 DEFFNpzs(R,N)
59320 [OPT p
59329 ;ADD R3,PC,#(pzs_table-P%-8) AND &00FF
59338 ;ADD R3,R3,#(pzs_table-P%-8) AND &FF00
59347 FNADR(3,pzs_table)
59356 LDRB R3,[R3,R]:BIC F,F,#&FF:ORR F,F,R3
59365 ]IF N=1 THEN [OPTp:ORR F,F,#flagN:]
59374 IF MEM$="48" THEN =FNsetR3
59383 =0
59392 
59401 DEFFNzs_c(R,N)
59410 [OPT p
59419 ;ADD R3,PC,#(zs_table-P%-8) AND &00FF
59428 ;ADD R3,R3,#(zs_table-P%-8) AND &FF00
59437 FNADR(3,zs_table)
59446 LDRB R3,[R3,R]:BIC F,F,#&FE:ORR F,F,R3
59455 ]IF N=1 THEN [OPTp:ORR F,F,#flagN:]
59464 IF MEM$="48" THEN =FNsetR3
59473 =0
59482 
59491 DEFFNzs(R,N)
59500 [OPT p
59509 ;ADD R3,PC,#(zs_table-P%-8) AND &00FF
59518 ;ADD R3,R3,#(zs_table-P%-8) AND &FF00
59527 FNADR(3,zs_table)
59536 LDRB R3,[R3,R]:BIC F,F,#&FF:ORR F,F,R3
59545 ]IF N=1 THEN [OPTp:ORR F,F,#flagN:]
59554 IF MEM$="48" THEN =FNsetR3
59563 =0
59572 
59581 DEF FNADR(s%,x%)
59590 REM The instruction sequence must be of FIXED length
59599 a%=x%-P%-8
59608 IF a%>=0 THEN
59617  [OPTp:ADD s%,PC,#(a% AND &000003FF):ADD s%,s%,#(a% AND &FFFFFC00):]
59626 OTHERWISE
59635  a%=-a%
59644  [OPTp:SUB s%,PC,#(a% AND &000003FF):SUB s%,s%,#(a% AND &FFFFFC00):]
59653 ENDIF
59662 =""
59671 DEFFNalign16
59680 WHILE (P% AND 15)<>0
59689 P%+=1 : O%+=1
59698 ENDWHILE
59707 =""
